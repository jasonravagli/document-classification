{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"4-Fusion-Document_Classification","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"c5cd47340b1e4df5a30dde5fc9aa1212":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_ab259e0528e8493aacde5eb2c525a8ca","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_15edac5ae2a4457d972cdd03583120b8","IPY_MODEL_ea31231210eb4d18af9ad04e0dd4c51a"]}},"ab259e0528e8493aacde5eb2c525a8ca":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"15edac5ae2a4457d972cdd03583120b8":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_8a0886272a924ff68ad66d25aab5c9d5","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":553507836,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":553507836,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c43f26859b9b4103b9978856c56195d0"}},"ea31231210eb4d18af9ad04e0dd4c51a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_89669300d39c406d85de74b94ad7a139","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 528M/528M [00:19&lt;00:00, 28.2MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_eeb5eed8b53f43748695a1fe331aaa9a"}},"8a0886272a924ff68ad66d25aab5c9d5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"c43f26859b9b4103b9978856c56195d0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"89669300d39c406d85de74b94ad7a139":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"eeb5eed8b53f43748695a1fe331aaa9a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"u-pfXw83ZF9V","colab_type":"text"},"source":["# Setup\n","\n","\n","> Import libraries\n","\n","> Import Drive\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"755J3fS5Y7Ec","colab_type":"code","outputId":"1ed7d6fa-eea2-4927-8027-7058038736a1","executionInfo":{"status":"ok","timestamp":1589707417810,"user_tz":-120,"elapsed":145000,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["!pip install \"torch==1.4\" \"torchvision==0.5.0\""],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting torch==1.4\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/24/19/4804aea17cd136f1705a5e98a00618cb8f6ccc375ad8bfa437408e09d058/torch-1.4.0-cp36-cp36m-manylinux1_x86_64.whl (753.4MB)\n","\u001b[K     |████████████████████████████████| 753.4MB 21kB/s \n","\u001b[?25hCollecting torchvision==0.5.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7e/90/6141bf41f5655c78e24f40f710fdd4f8a8aff6c8b7c6f0328240f649bdbe/torchvision-0.5.0-cp36-cp36m-manylinux1_x86_64.whl (4.0MB)\n","\u001b[K     |████████████████████████████████| 4.0MB 48.1MB/s \n","\u001b[?25hRequirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (7.0.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (1.18.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (1.12.0)\n","Installing collected packages: torch, torchvision\n","  Found existing installation: torch 1.5.0+cu101\n","    Uninstalling torch-1.5.0+cu101:\n","      Successfully uninstalled torch-1.5.0+cu101\n","  Found existing installation: torchvision 0.6.0+cu101\n","    Uninstalling torchvision-0.6.0+cu101:\n","      Successfully uninstalled torchvision-0.6.0+cu101\n","Successfully installed torch-1.4.0 torchvision-0.5.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"57Y7UvGDZc-q","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import io\n","import os\n","\n","from tqdm import tqdm\n","\n","import fastai\n","from fastai import *\n","from fastai.text import * \n","from functools import partial\n","from fastai.vision import *\n","from fastai.metrics import error_rate\n","\n","import h5py\n","import numpy as np\n","import pandas as pd\n","import cv2\n","from tqdm import tqdm\n","from fastai.callbacks import EarlyStoppingCallback, SaveModelCallback\n","from fastai.metrics import error_rate\n","\n","# Google Drive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth, drive\n","from oauth2client.client import GoogleCredentials\n","from google.colab import drive"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8f_eNXQgZf6S","colab_type":"text"},"source":["Google Drive"]},{"cell_type":"code","metadata":{"id":"5U4qYrxteh7r","colab_type":"code","outputId":"d27bc649-fb2b-420e-b904-efe270c2c0fe","executionInfo":{"status":"ok","timestamp":1589708974376,"user_tz":-120,"elapsed":1701516,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["# auth.authenticate_user()\n","# gauth = GoogleAuth()\n","# gauth.credentials = GoogleCredentials.get_application_default()\n","# GoogleDrive(gauth)\n","drive.mount(\"/content/drive\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qJRSsk-iZmcF","colab_type":"text"},"source":["General parameters and settings"]},{"cell_type":"code","metadata":{"id":"G3JEBf1fZn9R","colab_type":"code","colab":{}},"source":["input_models_folder = \"/content/drive/My Drive/document-classification/models/final-models/\"\n","output_models_folder = \"/content/drive/My Drive/document-classification/models/feature-fusion\"\n","dataset_path = \"/content/drive/My Drive/document-classification/datasets/rvl-cdip/mini-dataset-1488-288-192\"\n","\n","path_train_ocr = os.path.join(dataset_path, 'train_extracted.csv')\n","path_test_ocr = os.path.join(dataset_path, 'test_extracted.csv')\n","path_valid_ocr = os.path.join(dataset_path, 'valid_extracted.csv')\n","\n","# Shape of the images in input to the CNN\n","cnn_image_shape = (224, 224)\n","# Number of images classes\n","n_classes = 16\n","# Batch size to be used in training\n","batch_size = 32"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5Rc3YUhvaOr1","colab_type":"text"},"source":["# Input Models"]},{"cell_type":"markdown","metadata":{"id":"BDTHjQ6Sh0E3","colab_type":"text"},"source":["Load the VGG model (image classification) and the LSTM based model (text classification) trained in the previous notebooks."]},{"cell_type":"markdown","metadata":{"id":"hoEMGzlfaui0","colab_type":"text"},"source":["## VGG Model"]},{"cell_type":"markdown","metadata":{"id":"VARXe8_0bJGj","colab_type":"text"},"source":["### Data"]},{"cell_type":"code","metadata":{"id":"p-fxMdzpDdgF","colab_type":"code","outputId":"e24fac85-4b4b-42a1-ebde-6490415199ce","executionInfo":{"status":"ok","timestamp":1589709031427,"user_tz":-120,"elapsed":1758524,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["df_train = pd.read_csv(os.path.join(dataset_path, \"train-labels.csv\"), names=[\"image\", \"label\"])\n","df_valid = pd.read_csv(os.path.join(dataset_path, \"valid-labels.csv\"), names=[\"image\", \"label\"])\n","df_train[\"is_valid\"] = False\n","df_valid[\"is_valid\"] = True\n","df_joined = pd.concat([df_train, df_valid], ignore_index=True)\n","print(df_joined.head())\n","print(df_joined.tail())\n","\n","data_vgg = (ImageList.from_df(df_joined, dataset_path, cols=\"image\")#, folder=mini_dataset_path)\n","        .split_from_df()\n","        .label_from_df()\n","        .transform(size=cnn_image_shape, resize_method=ResizeMethod.SQUISH)\n","        .databunch(bs=batch_size)\n","        .normalize())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["                                 image  label  is_valid\n","0  train/0/0/0/0/94002065_94002066.tif     10     False\n","1         train/0/0/0/1/2074950097.tif     10     False\n","2      train/0/0/0/2/50284095-4103.tif      6     False\n","3           train/0/0/0/3/04003306.tif     10     False\n","4         train/0/0/0/4/2024967978.tif     11     False\n","                                        image  label  is_valid\n","1771             valid/0/2/8/3/0060077830.tif      7      True\n","1772             valid/0/2/8/4/2045723775.tif     15      True\n","1773  valid/0/2/8/5/2062426213_2062426237.tif     12      True\n","1774      valid/0/2/8/6/01747683_01747694.tif     13      True\n","1775               valid/0/2/8/7/10395005.tif      8      True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KVjv7tE5bK28","colab_type":"text"},"source":["### Model"]},{"cell_type":"code","metadata":{"id":"Y3pUjgmoduN1","colab_type":"code","outputId":"a89e90c6-3000-40de-9c41-53d7a37f0ef3","executionInfo":{"status":"ok","timestamp":1589709052021,"user_tz":-120,"elapsed":1779082,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["c5cd47340b1e4df5a30dde5fc9aa1212","ab259e0528e8493aacde5eb2c525a8ca","15edac5ae2a4457d972cdd03583120b8","ea31231210eb4d18af9ad04e0dd4c51a","8a0886272a924ff68ad66d25aab5c9d5","c43f26859b9b4103b9978856c56195d0","89669300d39c406d85de74b94ad7a139","eeb5eed8b53f43748695a1fe331aaa9a"]}},"source":["learn_vgg = cnn_learner(data_vgg, models.vgg16_bn, metrics=accuracy,\n","                    model_dir=input_models_folder)\n","learn_vgg.load(\"vgg16_1488-288-192_valid-acc-63.89\");\n","learn_vgg.model"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Downloading: \"https://download.pytorch.org/models/vgg16_bn-6c64b313.pth\" to /root/.cache/torch/checkpoints/vgg16_bn-6c64b313.pth\n"],"name":"stderr"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c5cd47340b1e4df5a30dde5fc9aa1212","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=553507836.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (7): Dropout(p=0.5, inplace=False)\n","    (8): Linear(in_features=512, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"wQ5eTjJwgxnH","colab_type":"text"},"source":["Remove the final layers from the model:"]},{"cell_type":"code","metadata":{"id":"iwO-kpzmeQmd","colab_type":"code","outputId":"5460aac0-be83-421f-90d2-355718aaa463","executionInfo":{"status":"ok","timestamp":1589709052023,"user_tz":-120,"elapsed":1778988,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.model[-1] = learn_vgg.model[-1][:-3] \n","learn_vgg.model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"NLjSxjkBa9IF","colab_type":"text"},"source":["## LSTM-based Model (ULMFiT)"]},{"cell_type":"markdown","metadata":{"id":"h7Hj0jKAazs7","colab_type":"text"},"source":["### Data"]},{"cell_type":"code","metadata":{"id":"5XZ0KIAjedn8","colab_type":"code","outputId":"f4aa3105-7322-4a5f-854b-dabfdd3b1bba","executionInfo":{"status":"ok","timestamp":1589709052875,"user_tz":-120,"elapsed":1779819,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["df_trn, df_val, df_test = pd.read_csv(path_train_ocr,names=['text','label']), pd.read_csv(path_valid_ocr,names=['text','label']), pd.read_csv(path_test_ocr,names=['text','label'])\n","print(df_trn.shape, df_val.shape, df_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(1488, 2) (288, 2) (192, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_XSuZDp1exH0","colab_type":"code","outputId":"2ea0c4b6-5ffc-4623-a1df-2ce7091dfb18","executionInfo":{"status":"ok","timestamp":1589709061647,"user_tz":-120,"elapsed":1788515,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":17}},"source":["# Language model data\n","data_lm = TextLMDataBunch.from_df(train_df = df_trn, valid_df = df_val, path = \"\",\n","                                  text_cols=\"text\", label_cols=\"label\")\n","# Classifier model data\n","data_clas = TextClasDataBunch.from_df(path = \"\", train_df = df_trn, valid_df = df_val,\n","                                      text_cols=\"text\", label_cols=\"label\", vocab=data_lm.train_ds.vocab, bs=batch_size)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"38p0TVX0a1tE","colab_type":"text"},"source":["### Model"]},{"cell_type":"code","metadata":{"id":"zQ5Sbfr4e4VU","colab_type":"code","outputId":"fbaa4687-be60-4ffb-a693-f83ce7a8e75b","executionInfo":{"status":"ok","timestamp":1589709073043,"user_tz":-120,"elapsed":1799879,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":680}},"source":["#learn_ocr = language_model_learner(data_lm, arch=AWD_LSTM, drop_mult=0.7, model_dir=models_folder_path)\n","\n","learn_text = text_classifier_learner(data_clas, arch=AWD_LSTM, drop_mult=0.7,\n","                                     model_dir=input_models_folder)\n","learn_text.load(\"text-class_1488-288-192_valid-acc-55.55\")\n","learn_text.model"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Downloading https://s3.amazonaws.com/fast-ai-modelzoo/wt103-fwd.tgz\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["SequentialRNN(\n","  (0): MultiBatchEncoder(\n","    (module): AWD_LSTM(\n","      (encoder): Embedding(15392, 400, padding_idx=1)\n","      (encoder_dp): EmbeddingDropout(\n","        (emb): Embedding(15392, 400, padding_idx=1)\n","      )\n","      (rnns): ModuleList(\n","        (0): WeightDropout(\n","          (module): LSTM(400, 1152, batch_first=True)\n","        )\n","        (1): WeightDropout(\n","          (module): LSTM(1152, 1152, batch_first=True)\n","        )\n","        (2): WeightDropout(\n","          (module): LSTM(1152, 400, batch_first=True)\n","        )\n","      )\n","      (input_dp): RNNDropout()\n","      (hidden_dps): ModuleList(\n","        (0): RNNDropout()\n","        (1): RNNDropout()\n","        (2): RNNDropout()\n","      )\n","    )\n","  )\n","  (1): PoolingLinearClassifier(\n","    (layers): Sequential(\n","      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): Dropout(p=0.27999999999999997, inplace=False)\n","      (2): Linear(in_features=1200, out_features=50, bias=True)\n","      (3): ReLU(inplace=True)\n","      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): Dropout(p=0.1, inplace=False)\n","      (6): Linear(in_features=50, out_features=16, bias=True)\n","    )\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"BpjHs2xFhBMA","colab_type":"text"},"source":["Remove the final layers from the model (according to https://gist.github.com/joshfp/b62b76eae95e6863cb511997b5a63118)"]},{"cell_type":"code","metadata":{"id":"f_ddKCxZfNzF","colab_type":"code","outputId":"2cc05025-3e99-4746-9b6f-6798937bf2ee","executionInfo":{"status":"ok","timestamp":1589709073045,"user_tz":-120,"elapsed":1799856,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":612}},"source":["learn_text.model[-1].layers = learn_text.model[-1].layers[:-3] \n","learn_text.model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SequentialRNN(\n","  (0): MultiBatchEncoder(\n","    (module): AWD_LSTM(\n","      (encoder): Embedding(15392, 400, padding_idx=1)\n","      (encoder_dp): EmbeddingDropout(\n","        (emb): Embedding(15392, 400, padding_idx=1)\n","      )\n","      (rnns): ModuleList(\n","        (0): WeightDropout(\n","          (module): LSTM(400, 1152, batch_first=True)\n","        )\n","        (1): WeightDropout(\n","          (module): LSTM(1152, 1152, batch_first=True)\n","        )\n","        (2): WeightDropout(\n","          (module): LSTM(1152, 400, batch_first=True)\n","        )\n","      )\n","      (input_dp): RNNDropout()\n","      (hidden_dps): ModuleList(\n","        (0): RNNDropout()\n","        (1): RNNDropout()\n","        (2): RNNDropout()\n","      )\n","    )\n","  )\n","  (1): PoolingLinearClassifier(\n","    (layers): Sequential(\n","      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): Dropout(p=0.27999999999999997, inplace=False)\n","      (2): Linear(in_features=1200, out_features=50, bias=True)\n","      (3): ReLU(inplace=True)\n","    )\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"OAYEuveEfclc","colab_type":"text"},"source":["# Concatenated Model"]},{"cell_type":"markdown","metadata":{"id":"q5hfaaxvidMI","colab_type":"text"},"source":["Combine the two previous models into a new one. Doing this, the new model will classify using both visual and textual features."]},{"cell_type":"markdown","metadata":{"id":"aH7fKnHSnLiR","colab_type":"text"},"source":["## Data"]},{"cell_type":"markdown","metadata":{"id":"sBoo3jY5blEO","colab_type":"text"},"source":["Define a custom PyTorch Dataset to concat the two datasets (images and text).\n","\n","When an element of the Dataset is requested (\\_\\_getitem\\__ method) resize the corresponding image to the target size before returning it along with the text and the label.\n","\n","N.B.: passing an ImageList could not be memory efficient (check how fastai manage the images in ImageList). Consider passing a list of paths and loading the image in \\_\\_getItem\\_\\_"]},{"cell_type":"code","metadata":{"id":"dTtMBAWXff4k","colab_type":"code","colab":{}},"source":["# Per accedere ad alcune funzionalità di fastai è necessario definire cose aggiuntive\n","# nel Dataset\n","class ConcatDataset(Dataset):\n","    def __init__(self, x_images: ImageList, x_texts: TextList, y): \n","        self.x_images = x_images\n","        self.x_texts = x_texts\n","        self.y = y\n","\n","    def __len__(self):\n","        return len(self.y)\n","    \n","    def __getitem__(self, i):\n","        return (self.x_images[i].apply_tfms([], size=cnn_image_shape, resize_method=ResizeMethod.SQUISH),\n","                                      self.x_texts[i]), self.y[i]\n","\n","train_ds = ConcatDataset(data_vgg.train_ds.x, data_clas.train_ds.x, data_vgg.train_ds.y)\n","valid_ds = ConcatDataset(data_vgg.valid_ds.x, data_clas.valid_ds.x, data_vgg.valid_ds.y)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AqZH5ERoe1XH","colab_type":"text"},"source":["Define a collate function to pass to the DataBunch. This function will replace the one used by the Dataloader and describe how to collate the samples taken for a batch from the ConcatDataset."]},{"cell_type":"code","metadata":{"id":"xLv_ovjGfKhm","colab_type":"code","colab":{}},"source":["def my_collate(batch):\n","    x,y = list(zip(*batch))\n","    x1,x2 = list(zip(*x))\n","    x1 = to_data(x1)\n","    x1 = torch.stack(x1)\n","    x2, y = pad_collate(list(zip(x2, y)), pad_idx=1, pad_first=True)\n","    \n","    return (x1, x2), y"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oDXAXxZxfgc6","colab_type":"text"},"source":["The following two cells were used in the example taken from https://gist.github.com/joshfp/b62b76eae95e6863cb511997b5a63118.\n","\n","The Sampler would allow to random sort data, but their behaviour is not clear to us.\n","We found simpler letting the DataBunch automatic creating the DataLoaders."]},{"cell_type":"code","metadata":{"id":"ofabJecQk3X4","colab_type":"code","colab":{}},"source":["# Sono dei sampler usati per dati testuali che aggiungono randomicità nella fornitura dei \n","# dati al learner (a quanto ho capito)\n","# train_sampler = SortishSampler(data_clas.train_ds.x, key=lambda t: len(data_clas.train_ds[t][0].data), bs=batch_size)\n","# valid_sampler = SortSampler(data_clas.valid_ds.x, key=lambda t: len(data_clas.valid_ds[t][0].data))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IAczzAmxk-AE","colab_type":"code","colab":{}},"source":["# train_dl = DataLoader(train_ds, batch_size, sampler=train_sampler)\n","# valid_dl = DataLoader(valid_ds, batch_size, sampler=valid_sampler)\n","\n","# data = DataBunch(train_dl, valid_dl, device=defaults.device, collate_fn=my_collate, path=dataset_path)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y5soXFj4gkCY","colab_type":"text"},"source":["Create the DataBunch from the custom datasets and the collate function."]},{"cell_type":"code","metadata":{"id":"6cVrPn38gsxX","colab_type":"code","colab":{}},"source":["data = DataBunch.create(train_ds, valid_ds, collate_fn=my_collate, path=dataset_path, bs=batch_size)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0bCaaM7I1oFm","colab_type":"code","outputId":"97605780-5602-41e8-c3ba-90128233710b","executionInfo":{"status":"ok","timestamp":1589709090900,"user_tz":-120,"elapsed":1817667,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["data.one_batch()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([tensor([[[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[0.9745, 0.9408, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[0.9745, 0.9408, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[0.9745, 0.9408, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[0.0000, 0.0000, 0.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.9911, 0.9884, 0.9884,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.7824, 0.7824, 0.7824,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[0.0000, 0.0000, 0.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.9911, 0.9884, 0.9884,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.7824, 0.7824, 0.7824,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[0.0000, 0.0000, 0.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.9911, 0.9884, 0.9884,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.7824, 0.7824, 0.7824,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          ...,\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]]]),\n","  tensor([[    1,     1,     1,  ...,   363,    73,     0],\n","          [    1,     1,     1,  ...,    57,   166,     0],\n","          [    1,     1,     1,  ...,     0,  1804,   784],\n","          ...,\n","          [    1,     1,     1,  ...,   649,     0,     0],\n","          [    1,     1,     1,  ...,   102, 13361,     0],\n","          [    1,     1,     1,  ...,   143,  1848,   622]])],\n"," tensor([ 7, 15,  3, 13,  5,  7,  5,  4, 14, 10,  4,  5, 13,  6, 13, 13,  2,  0,\n","         14,  1,  0, 14, 13,  2,  9, 13,  9, 10,  7,  9,  1,  8]))"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"og60OiHIpPky","colab_type":"text"},"source":["## Model"]},{"cell_type":"markdown","metadata":{"id":"SuL4I1p-l1y7","colab_type":"text"},"source":["Define the new model taking the other two and adding linear layers at the end.\n","\n","The size of the input to the first linear layer must agree with the output of the other two models."]},{"cell_type":"code","metadata":{"id":"BU8qHKqZpUN9","colab_type":"code","colab":{}},"source":["class ConcatModel(nn.Module):\n","    def __init__(self, mod_cnn, mod_nlp, layers, drops): \n","        super().__init__()\n","        self.mod_cnn = mod_cnn\n","        self.mod_nlp = mod_nlp\n","        # Da modificare\n","        lst_layers = []\n","        activs = [nn.ReLU(inplace=True),] * (len(layers)-2) + [None]\n","        for n_in,n_out,p,actn in zip(layers[:-1], layers[1:], drops, activs):\n","            lst_layers += bn_drop_lin(n_in, n_out, p=p, actn=actn)\n","        self.layers = nn.Sequential(*lst_layers)\n","\n","    def forward(self, x_cnn, x_nlp):\n","        x_cnn = self.mod_cnn(x_cnn)\n","        # perchè [0]? Rimuovere? -> Forse perche il cat si aspetta la stessa \n","        # dimensione dei tensori lungo la dim=0 e x_nlp diventa multidim?\n","        x_nlp = self.mod_nlp(x_nlp)[0]\n","        x = torch.cat([x_cnn, x_nlp], dim=1)\n","        return self.layers(x)    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4vp27FipbbE","colab_type":"code","outputId":"83729545-6774-4e79-f84e-56239d7c3789","executionInfo":{"status":"ok","timestamp":1589709090904,"user_tz":-120,"elapsed":1817644,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["lin_layers = [512+50, 16]\n","ps = [0.8]\n","model = ConcatModel(learn_vgg.model, learn_text.model, lin_layers, ps)\n","model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ConcatModel(\n","  (mod_cnn): Sequential(\n","    (0): Sequential(\n","      (0): Sequential(\n","        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (2): ReLU(inplace=True)\n","        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (5): ReLU(inplace=True)\n","        (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (9): ReLU(inplace=True)\n","        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (12): ReLU(inplace=True)\n","        (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (16): ReLU(inplace=True)\n","        (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (19): ReLU(inplace=True)\n","        (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (22): ReLU(inplace=True)\n","        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (26): ReLU(inplace=True)\n","        (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (29): ReLU(inplace=True)\n","        (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (32): ReLU(inplace=True)\n","        (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (36): ReLU(inplace=True)\n","        (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (39): ReLU(inplace=True)\n","        (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (42): ReLU(inplace=True)\n","        (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      )\n","      (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","    )\n","    (1): Sequential(\n","      (0): AdaptiveConcatPool2d(\n","        (ap): AdaptiveAvgPool2d(output_size=1)\n","        (mp): AdaptiveMaxPool2d(output_size=1)\n","      )\n","      (1): Flatten()\n","      (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (3): Dropout(p=0.25, inplace=False)\n","      (4): Linear(in_features=1024, out_features=512, bias=True)\n","      (5): ReLU(inplace=True)\n","    )\n","  )\n","  (mod_nlp): SequentialRNN(\n","    (0): MultiBatchEncoder(\n","      (module): AWD_LSTM(\n","        (encoder): Embedding(15392, 400, padding_idx=1)\n","        (encoder_dp): EmbeddingDropout(\n","          (emb): Embedding(15392, 400, padding_idx=1)\n","        )\n","        (rnns): ModuleList(\n","          (0): WeightDropout(\n","            (module): LSTM(400, 1152, batch_first=True)\n","          )\n","          (1): WeightDropout(\n","            (module): LSTM(1152, 1152, batch_first=True)\n","          )\n","          (2): WeightDropout(\n","            (module): LSTM(1152, 400, batch_first=True)\n","          )\n","        )\n","        (input_dp): RNNDropout()\n","        (hidden_dps): ModuleList(\n","          (0): RNNDropout()\n","          (1): RNNDropout()\n","          (2): RNNDropout()\n","        )\n","      )\n","    )\n","    (1): PoolingLinearClassifier(\n","      (layers): Sequential(\n","        (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (1): Dropout(p=0.27999999999999997, inplace=False)\n","        (2): Linear(in_features=1200, out_features=50, bias=True)\n","        (3): ReLU(inplace=True)\n","      )\n","    )\n","  )\n","  (layers): Sequential(\n","    (0): BatchNorm1d(562, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (1): Dropout(p=0.8, inplace=False)\n","    (2): Linear(in_features=562, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"ofNKNyU6qLm5","colab_type":"text"},"source":["## Learner"]},{"cell_type":"code","metadata":{"id":"EsO0RZXRnjOq","colab_type":"code","outputId":"a209b34d-ea41-4c2d-f66e-ef59a5078865","executionInfo":{"status":"ok","timestamp":1589709090905,"user_tz":-120,"elapsed":1817624,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(len(learn_text.layer_groups))\n","print(len(learn_vgg.layer_groups))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["5\n","3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VailNOCcZseh","colab_type":"code","outputId":"d88e6405-3c68-48c9-e24c-2032a22f621a","executionInfo":{"status":"ok","timestamp":1589709090906,"user_tz":-120,"elapsed":1817600,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"KHq3iYh0ZPq4","colab_type":"code","outputId":"16968d6d-bf88-4039-cc80-c420c8cd2ae0","executionInfo":{"status":"ok","timestamp":1589709090908,"user_tz":-120,"elapsed":1817581,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.layer_groups"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Sequential(\n","   (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (2): ReLU(inplace=True)\n","   (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (5): ReLU(inplace=True)\n","   (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (9): ReLU(inplace=True)\n","   (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (12): ReLU(inplace=True)\n","   (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (16): ReLU(inplace=True)\n","   (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (19): ReLU(inplace=True)\n","   (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n"," ), Sequential(\n","   (0): ReLU(inplace=True)\n","   (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (4): ReLU(inplace=True)\n","   (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (7): ReLU(inplace=True)\n","   (8): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (10): ReLU(inplace=True)\n","   (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (12): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (13): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (14): ReLU(inplace=True)\n","   (15): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (17): ReLU(inplace=True)\n","   (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (20): ReLU(inplace=True)\n","   (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (22): AdaptiveAvgPool2d(output_size=(7, 7))\n"," ), Sequential(\n","   (0): AdaptiveAvgPool2d(output_size=1)\n","   (1): AdaptiveMaxPool2d(output_size=1)\n","   (2): Flatten()\n","   (3): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (4): Dropout(p=0.25, inplace=False)\n","   (5): Linear(in_features=1024, out_features=512, bias=True)\n","   (6): ReLU(inplace=True)\n","   (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (8): Dropout(p=0.5, inplace=False)\n","   (9): Linear(in_features=512, out_features=16, bias=True)\n"," )]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"Ld4gb5R5c6bT","colab_type":"text"},"source":["Define layer groups for the new model. Reuse the two other models layer groups and add a group with the new final layers.\n","\n","N.B. Separate the CNN linear layers from the last convolutional section into a new group (Do it in the notebook 2)"]},{"cell_type":"code","metadata":{"id":"OhHhmmX9qRWl","colab_type":"code","colab":{}},"source":["loss_func = nn.CrossEntropyLoss()\n","# Serve per il discriminative layer training -> serve per dare learning rates diversi\n","# ad ogni gruppo\n","# Approfondire quali layer appartengono ai gruppi\n","layer_groups = [nn.Sequential(*flatten_model(learn_text.layer_groups[0])),\n","                nn.Sequential(*flatten_model(learn_text.layer_groups[1])),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[2]) + \n","                                flatten_model(learn_vgg.layer_groups[0]))),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[3]) + \n","                                flatten_model(learn_vgg.layer_groups[1]))),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[4]) + \n","                                flatten_model(learn_vgg.layer_groups[2]))),\n","                nn.Sequential(*flatten_model(model.layers))]\n","\n","learn = Learner(data, model, loss_func=loss_func, metrics=accuracy, layer_groups=layer_groups,\n","                path=output_models_folder)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tizW_P_AqQc9","colab_type":"text"},"source":["# Training"]},{"cell_type":"code","metadata":{"id":"vViMd6Q5o8Ir","colab_type":"code","colab":{}},"source":["# Congela tutti i gruppi di layer in layer_groups tranne nell'ultimo (i fully connected)\n","learn.freeze()\n","# learn.summary() -> non funziona per via del custom dataset"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XG5YUZUKnh4y","colab_type":"text"},"source":["Find the best learning rate studying its trend (Experimental).\n","\n","This function has been taken from this post: https://forums.fast.ai/t/automated-learning-rate-suggester/44199"]},{"cell_type":"code","metadata":{"id":"2SF2uu12nv2K","colab_type":"code","outputId":"45aac464-5a3c-4615-eaa3-96cd54e45ac3","executionInfo":{"status":"ok","timestamp":1589668833425,"user_tz":-120,"elapsed":340964,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":684}},"source":["def find_appropriate_lr(model:Learner, lr_diff:int = 15, loss_threshold:float = .05, adjust_value:float = 1, plot:bool = False) -> float:\n","    #Run the Learning Rate Finder\n","    model.lr_find()\n","    \n","    #Get loss values and their corresponding gradients, and get lr values\n","    losses = np.array(model.recorder.losses)\n","    assert(lr_diff < len(losses))\n","    loss_grad = np.gradient(losses)\n","    lrs = model.recorder.lrs\n","    \n","    #Search for index in gradients where loss is lowest before the loss spike\n","    #Initialize right and left idx using the lr_diff as a spacing unit\n","    #Set the local min lr as -1 to signify if threshold is too low\n","    r_idx = -1\n","    l_idx = r_idx - lr_diff\n","    while (l_idx >= -len(losses)) and (abs(loss_grad[r_idx] - loss_grad[l_idx]) > loss_threshold):\n","        local_min_lr = lrs[l_idx]\n","        r_idx -= 1\n","        l_idx -= 1\n","\n","    lr_to_use = local_min_lr * adjust_value\n","    \n","    if plot:\n","        # plots the gradients of the losses in respect to the learning rate change\n","        plt.plot(loss_grad)\n","        plt.plot(len(losses)+l_idx, loss_grad[l_idx],markersize=10,marker='o',color='red')\n","        plt.ylabel(\"Loss\")\n","        plt.xlabel(\"Index of LRs\")\n","        plt.show()\n","\n","        plt.plot(np.log10(lrs), losses)\n","        plt.ylabel(\"Loss\")\n","        plt.xlabel(\"Log 10 Transform of Learning Rate\")\n","        loss_coord = np.interp(np.log10(lr_to_use), np.log10(lrs), losses)\n","        plt.plot(np.log10(lr_to_use), loss_coord, markersize=10,marker='o',color='red')\n","        plt.show()\n","        \n","    return lr_to_use\n","\n","learning_rate = find_appropriate_lr(learn, plot=True)\n","print(f\"Learning rate: {learning_rate}\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='1' class='' max='3' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      33.33% [1/3 04:59<09:59]\n","    </div>\n","    \n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>3.510786</td>\n","      <td>#na#</td>\n","      <td>04:59</td>\n","    </tr>\n","  </tbody>\n","</table><p>\n","\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='41' class='' max='46' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      89.13% [41/46 00:36<00:04 9.1997]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["Learning rate: 0.004365158322401656\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3f6yZ7PeGxxl","colab_type":"text"},"source":["Train the network."]},{"cell_type":"code","metadata":{"id":"421dYBJsHIMz","colab_type":"code","outputId":"94d271ee-f561-40e6-9fc4-88739e8f8795","executionInfo":{"status":"ok","timestamp":1589671205105,"user_tz":-120,"elapsed":2343246,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["save_model = SaveModelCallback(learn, every=\"improvement\", monitor=\"accuracy\",\n","                               mode=\"max\", name=\"best\")\n","learn.fit_one_cycle(50, max_lr=learning_rate, callbacks=[save_model])\n","print(\"Training completed\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>3.220483</td>\n","      <td>2.502279</td>\n","      <td>0.215278</td>\n","      <td>02:14</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>2.721853</td>\n","      <td>1.970672</td>\n","      <td>0.513889</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>2.102808</td>\n","      <td>1.546296</td>\n","      <td>0.611111</td>\n","      <td>00:46</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>1.529572</td>\n","      <td>1.299061</td>\n","      <td>0.652778</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>1.083635</td>\n","      <td>1.227770</td>\n","      <td>0.649306</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.753670</td>\n","      <td>1.196534</td>\n","      <td>0.656250</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.553486</td>\n","      <td>1.234956</td>\n","      <td>0.677083</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.469860</td>\n","      <td>1.305974</td>\n","      <td>0.638889</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.439078</td>\n","      <td>1.467183</td>\n","      <td>0.611111</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.444947</td>\n","      <td>1.460294</td>\n","      <td>0.659722</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.523674</td>\n","      <td>1.512085</td>\n","      <td>0.628472</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.643836</td>\n","      <td>1.818254</td>\n","      <td>0.579861</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.785472</td>\n","      <td>1.529551</td>\n","      <td>0.631944</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.920099</td>\n","      <td>2.153219</td>\n","      <td>0.579861</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.981935</td>\n","      <td>1.886610</td>\n","      <td>0.625000</td>\n","      <td>00:42</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.961058</td>\n","      <td>2.116254</td>\n","      <td>0.597222</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.960422</td>\n","      <td>1.676676</td>\n","      <td>0.635417</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.997066</td>\n","      <td>1.962970</td>\n","      <td>0.600694</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.985745</td>\n","      <td>1.727163</td>\n","      <td>0.649306</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.921910</td>\n","      <td>1.657020</td>\n","      <td>0.645833</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.904379</td>\n","      <td>1.701344</td>\n","      <td>0.638889</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>21</td>\n","      <td>0.886494</td>\n","      <td>1.637972</td>\n","      <td>0.649306</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>22</td>\n","      <td>0.855149</td>\n","      <td>1.817837</td>\n","      <td>0.638889</td>\n","      <td>00:47</td>\n","    </tr>\n","    <tr>\n","      <td>23</td>\n","      <td>0.746689</td>\n","      <td>1.792092</td>\n","      <td>0.638889</td>\n","      <td>00:47</td>\n","    </tr>\n","    <tr>\n","      <td>24</td>\n","      <td>0.714490</td>\n","      <td>1.769499</td>\n","      <td>0.642361</td>\n","      <td>00:46</td>\n","    </tr>\n","    <tr>\n","      <td>25</td>\n","      <td>0.657042</td>\n","      <td>1.678218</td>\n","      <td>0.666667</td>\n","      <td>00:46</td>\n","    </tr>\n","    <tr>\n","      <td>26</td>\n","      <td>0.691134</td>\n","      <td>1.836248</td>\n","      <td>0.642361</td>\n","      <td>00:46</td>\n","    </tr>\n","    <tr>\n","      <td>27</td>\n","      <td>0.687079</td>\n","      <td>1.725269</td>\n","      <td>0.670139</td>\n","      <td>00:46</td>\n","    </tr>\n","    <tr>\n","      <td>28</td>\n","      <td>0.597107</td>\n","      <td>1.656432</td>\n","      <td>0.673611</td>\n","      <td>00:46</td>\n","    </tr>\n","    <tr>\n","      <td>29</td>\n","      <td>0.571024</td>\n","      <td>1.649623</td>\n","      <td>0.673611</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>30</td>\n","      <td>0.546521</td>\n","      <td>1.519618</td>\n","      <td>0.687500</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>31</td>\n","      <td>0.509624</td>\n","      <td>1.580838</td>\n","      <td>0.680556</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>32</td>\n","      <td>0.488406</td>\n","      <td>1.684045</td>\n","      <td>0.697917</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>33</td>\n","      <td>0.462130</td>\n","      <td>1.669606</td>\n","      <td>0.673611</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>34</td>\n","      <td>0.412501</td>\n","      <td>1.675442</td>\n","      <td>0.673611</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>35</td>\n","      <td>0.393057</td>\n","      <td>1.691648</td>\n","      <td>0.680556</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>36</td>\n","      <td>0.396559</td>\n","      <td>1.714096</td>\n","      <td>0.673611</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>37</td>\n","      <td>0.365956</td>\n","      <td>1.681871</td>\n","      <td>0.670139</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>38</td>\n","      <td>0.325198</td>\n","      <td>1.652823</td>\n","      <td>0.680556</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>39</td>\n","      <td>0.317553</td>\n","      <td>1.675324</td>\n","      <td>0.673611</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>40</td>\n","      <td>0.300847</td>\n","      <td>1.679629</td>\n","      <td>0.673611</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>41</td>\n","      <td>0.266876</td>\n","      <td>1.670971</td>\n","      <td>0.666667</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>42</td>\n","      <td>0.261758</td>\n","      <td>1.690859</td>\n","      <td>0.670139</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>43</td>\n","      <td>0.267113</td>\n","      <td>1.694667</td>\n","      <td>0.666667</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>44</td>\n","      <td>0.252150</td>\n","      <td>1.670507</td>\n","      <td>0.673611</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>45</td>\n","      <td>0.250807</td>\n","      <td>1.658394</td>\n","      <td>0.684028</td>\n","      <td>00:43</td>\n","    </tr>\n","    <tr>\n","      <td>46</td>\n","      <td>0.249311</td>\n","      <td>1.683523</td>\n","      <td>0.670139</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>47</td>\n","      <td>0.241515</td>\n","      <td>1.680516</td>\n","      <td>0.680556</td>\n","      <td>00:44</td>\n","    </tr>\n","    <tr>\n","      <td>48</td>\n","      <td>0.223195</td>\n","      <td>1.681870</td>\n","      <td>0.663194</td>\n","      <td>00:45</td>\n","    </tr>\n","    <tr>\n","      <td>49</td>\n","      <td>0.208988</td>\n","      <td>1.671484</td>\n","      <td>0.673611</td>\n","      <td>00:45</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Better model found at epoch 0 with accuracy value: 0.2152777761220932.\n","Better model found at epoch 1 with accuracy value: 0.5138888955116272.\n","Better model found at epoch 2 with accuracy value: 0.6111111044883728.\n","Better model found at epoch 3 with accuracy value: 0.6527777910232544.\n","Better model found at epoch 5 with accuracy value: 0.65625.\n","Better model found at epoch 6 with accuracy value: 0.6770833134651184.\n","Better model found at epoch 30 with accuracy value: 0.6875.\n","Better model found at epoch 32 with accuracy value: 0.6979166865348816.\n","Training completed\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OM7Zy8-teOsj","colab_type":"text"},"source":["## Unfreezing and fine-tuning"]},{"cell_type":"markdown","metadata":{"id":"pWW1PX4oebRo","colab_type":"text"},"source":["In this section, we unfreeze the convolutional layers and fine-tune the whole model."]},{"cell_type":"code","metadata":{"id":"K6iBeH5reSJu","colab_type":"code","colab":{}},"source":["# Load the best model from the previous stage of training\n","learn.load(\"best\")\n","learn.unfreeze()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i8ED1y09eyng","colab_type":"text"},"source":["Study the learning rate trend to appropriately set a range of values for the fine tuning process."]},{"cell_type":"code","metadata":{"id":"Q_Y3_xU7e_W4","colab_type":"code","outputId":"bc6aff05-dbb7-4046-b4cf-4f4b92883d07","executionInfo":{"status":"ok","timestamp":1589709890173,"user_tz":-120,"elapsed":67192,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":405}},"source":["learn.lr_find()\n","learn.recorder.plot()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='1' class='' max='3' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      33.33% [1/3 00:50<01:41]\n","    </div>\n","    \n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.431189</td>\n","      <td>#na#</td>\n","      <td>00:50</td>\n","    </tr>\n","  </tbody>\n","</table><p>\n","\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='10' class='' max='46' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      21.74% [10/46 00:12<00:44 1.0187]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GT1cXvDyh_T3","colab_type":"text"},"source":["Unfreeze the layers and train the network with a learning rate ranging from 1e-6 (for the first layer) to 1e-2 (for the last layer).\n","\n","Adjust early stopping settings before fine tuning (fine tuning requires less epochs)."]},{"cell_type":"code","metadata":{"id":"A8DtZI3XiTxa","colab_type":"code","outputId":"d8d4af7f-1f5b-4a9f-e403-2e19a8665908","executionInfo":{"status":"ok","timestamp":1589713045524,"user_tz":-120,"elapsed":3040938,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["save_model = SaveModelCallback(learn, every=\"improvement\", monitor=\"accuracy\",\n","                               mode=\"max\", name=\"best-fine-tuning\")\n","\n","learn.fit_one_cycle(50, max_lr=slice(5e-6,9e-6), callbacks=[save_model])\n","print(\"Fine tuning completed\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.392495</td>\n","      <td>1.585187</td>\n","      <td>0.697917</td>\n","      <td>02:09</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.376742</td>\n","      <td>1.578793</td>\n","      <td>0.701389</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.382482</td>\n","      <td>1.601176</td>\n","      <td>0.701389</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.401182</td>\n","      <td>1.596431</td>\n","      <td>0.711806</td>\n","      <td>00:57</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.389718</td>\n","      <td>1.594447</td>\n","      <td>0.697917</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.375560</td>\n","      <td>1.583256</td>\n","      <td>0.704861</td>\n","      <td>00:57</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.349609</td>\n","      <td>1.535173</td>\n","      <td>0.701389</td>\n","      <td>00:57</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.339623</td>\n","      <td>1.558284</td>\n","      <td>0.708333</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.324572</td>\n","      <td>1.496003</td>\n","      <td>0.694444</td>\n","      <td>00:57</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.304771</td>\n","      <td>1.505167</td>\n","      <td>0.694444</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.322147</td>\n","      <td>1.514399</td>\n","      <td>0.704861</td>\n","      <td>00:57</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.302705</td>\n","      <td>1.493578</td>\n","      <td>0.704861</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.272916</td>\n","      <td>1.523783</td>\n","      <td>0.697917</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.277521</td>\n","      <td>1.574941</td>\n","      <td>0.697917</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.244477</td>\n","      <td>1.541167</td>\n","      <td>0.697917</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.229686</td>\n","      <td>1.536728</td>\n","      <td>0.701389</td>\n","      <td>01:01</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.217767</td>\n","      <td>1.520039</td>\n","      <td>0.708333</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.217591</td>\n","      <td>1.512540</td>\n","      <td>0.708333</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.178585</td>\n","      <td>1.559262</td>\n","      <td>0.694444</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.182271</td>\n","      <td>1.562128</td>\n","      <td>0.697917</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.153268</td>\n","      <td>1.585138</td>\n","      <td>0.704861</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>21</td>\n","      <td>0.149888</td>\n","      <td>1.575427</td>\n","      <td>0.697917</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>22</td>\n","      <td>0.165949</td>\n","      <td>1.539685</td>\n","      <td>0.718750</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>23</td>\n","      <td>0.140298</td>\n","      <td>1.551440</td>\n","      <td>0.694444</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>24</td>\n","      <td>0.165977</td>\n","      <td>1.547557</td>\n","      <td>0.715278</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>25</td>\n","      <td>0.160878</td>\n","      <td>1.557118</td>\n","      <td>0.690972</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>26</td>\n","      <td>0.134018</td>\n","      <td>1.556787</td>\n","      <td>0.708333</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>27</td>\n","      <td>0.122426</td>\n","      <td>1.538450</td>\n","      <td>0.708333</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>28</td>\n","      <td>0.128586</td>\n","      <td>1.579115</td>\n","      <td>0.718750</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>29</td>\n","      <td>0.127894</td>\n","      <td>1.550612</td>\n","      <td>0.697917</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>30</td>\n","      <td>0.121558</td>\n","      <td>1.537802</td>\n","      <td>0.708333</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>31</td>\n","      <td>0.112199</td>\n","      <td>1.560686</td>\n","      <td>0.704861</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>32</td>\n","      <td>0.108968</td>\n","      <td>1.555489</td>\n","      <td>0.711806</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>33</td>\n","      <td>0.105380</td>\n","      <td>1.548007</td>\n","      <td>0.690972</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>34</td>\n","      <td>0.109086</td>\n","      <td>1.536335</td>\n","      <td>0.697917</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>35</td>\n","      <td>0.111687</td>\n","      <td>1.568551</td>\n","      <td>0.704861</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>36</td>\n","      <td>0.110312</td>\n","      <td>1.536826</td>\n","      <td>0.701389</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>37</td>\n","      <td>0.105371</td>\n","      <td>1.553579</td>\n","      <td>0.697917</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>38</td>\n","      <td>0.095224</td>\n","      <td>1.532098</td>\n","      <td>0.708333</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>39</td>\n","      <td>0.084577</td>\n","      <td>1.558741</td>\n","      <td>0.708333</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>40</td>\n","      <td>0.084175</td>\n","      <td>1.537789</td>\n","      <td>0.701389</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>41</td>\n","      <td>0.091119</td>\n","      <td>1.531669</td>\n","      <td>0.697917</td>\n","      <td>01:00</td>\n","    </tr>\n","    <tr>\n","      <td>42</td>\n","      <td>0.093745</td>\n","      <td>1.535661</td>\n","      <td>0.701389</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>43</td>\n","      <td>0.096767</td>\n","      <td>1.536002</td>\n","      <td>0.697917</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>44</td>\n","      <td>0.087549</td>\n","      <td>1.535083</td>\n","      <td>0.701389</td>\n","      <td>00:57</td>\n","    </tr>\n","    <tr>\n","      <td>45</td>\n","      <td>0.093166</td>\n","      <td>1.568169</td>\n","      <td>0.687500</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>46</td>\n","      <td>0.097284</td>\n","      <td>1.556991</td>\n","      <td>0.708333</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>47</td>\n","      <td>0.085180</td>\n","      <td>1.558955</td>\n","      <td>0.704861</td>\n","      <td>00:58</td>\n","    </tr>\n","    <tr>\n","      <td>48</td>\n","      <td>0.092046</td>\n","      <td>1.568830</td>\n","      <td>0.704861</td>\n","      <td>00:59</td>\n","    </tr>\n","    <tr>\n","      <td>49</td>\n","      <td>0.077380</td>\n","      <td>1.541601</td>\n","      <td>0.704861</td>\n","      <td>00:58</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Better model found at epoch 0 with accuracy value: 0.6979166865348816.\n","Better model found at epoch 1 with accuracy value: 0.7013888955116272.\n","Better model found at epoch 3 with accuracy value: 0.7118055820465088.\n","Better model found at epoch 22 with accuracy value: 0.71875.\n","Fine tuning completed\n"],"name":"stdout"}]}]}