{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"4-Feature-Fusion-Document-Image-Classification","provenance":[],"collapsed_sections":["hoEMGzlfaui0","h7Hj0jKAazs7"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"10d6efb82bc742658503d67a7ab58991":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_3d10f929f96b46dab86986fb32db737f","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_b545b72ae58940df96e4b58f3bf5b5c3","IPY_MODEL_cf7fedeca4b44800a6434d3f63d6027f"]}},"3d10f929f96b46dab86986fb32db737f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b545b72ae58940df96e4b58f3bf5b5c3":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_82cb6f4297be4fbe8a0c7c6a9340a28a","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":553507836,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":553507836,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0780818904c5454c8b87984827418862"}},"cf7fedeca4b44800a6434d3f63d6027f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_ba9a2fa62c5f4c4e98323071bc2ec5e6","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 528M/528M [00:09&lt;00:00, 61.4MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0cb70b021db8481c84e96774f4d8d0ac"}},"82cb6f4297be4fbe8a0c7c6a9340a28a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"0780818904c5454c8b87984827418862":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ba9a2fa62c5f4c4e98323071bc2ec5e6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"0cb70b021db8481c84e96774f4d8d0ac":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"u-pfXw83ZF9V","colab_type":"text"},"source":["# Setup\n","\n","\n","Import libraries\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"755J3fS5Y7Ec","colab_type":"code","outputId":"b1fb8f6c-64a7-4283-97bd-ec4139f6fda4","executionInfo":{"status":"ok","timestamp":1592212617498,"user_tz":-120,"elapsed":146001,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":346}},"source":["!pip install \"torch==1.4\" \"torchvision==0.5.0\""],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting torch==1.4\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/24/19/4804aea17cd136f1705a5e98a00618cb8f6ccc375ad8bfa437408e09d058/torch-1.4.0-cp36-cp36m-manylinux1_x86_64.whl (753.4MB)\n","\u001b[K     |████████████████████████████████| 753.4MB 22kB/s \n","\u001b[?25hCollecting torchvision==0.5.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7e/90/6141bf41f5655c78e24f40f710fdd4f8a8aff6c8b7c6f0328240f649bdbe/torchvision-0.5.0-cp36-cp36m-manylinux1_x86_64.whl (4.0MB)\n","\u001b[K     |████████████████████████████████| 4.0MB 32.7MB/s \n","\u001b[?25hRequirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (7.0.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (1.18.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (1.12.0)\n","Installing collected packages: torch, torchvision\n","  Found existing installation: torch 1.5.0+cu101\n","    Uninstalling torch-1.5.0+cu101:\n","      Successfully uninstalled torch-1.5.0+cu101\n","  Found existing installation: torchvision 0.6.0+cu101\n","    Uninstalling torchvision-0.6.0+cu101:\n","      Successfully uninstalled torchvision-0.6.0+cu101\n","Successfully installed torch-1.4.0 torchvision-0.5.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"57Y7UvGDZc-q","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import io\n","import os\n","\n","from tqdm import tqdm\n","\n","import fastai\n","from fastai import *\n","from fastai.text import * \n","from functools import partial\n","from fastai.vision import *\n","from fastai.metrics import error_rate\n","\n","import h5py\n","import numpy as np\n","import pandas as pd\n","import cv2\n","from tqdm import tqdm\n","from fastai.callbacks import EarlyStoppingCallback, SaveModelCallback\n","from fastai.metrics import error_rate\n","\n","# Google Drive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth, drive\n","from oauth2client.client import GoogleCredentials\n","from google.colab import drive"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8f_eNXQgZf6S","colab_type":"text"},"source":["Google Drive"]},{"cell_type":"code","metadata":{"id":"5U4qYrxteh7r","colab_type":"code","outputId":"411256f3-d723-46a4-f159-39aa2c91403e","executionInfo":{"status":"ok","timestamp":1592212641470,"user_tz":-120,"elapsed":169910,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":128}},"source":["# auth.authenticate_user()\n","# gauth = GoogleAuth()\n","# gauth.credentials = GoogleCredentials.get_application_default()\n","# GoogleDrive(gauth)\n","drive.mount(\"/content/drive\")"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qJRSsk-iZmcF","colab_type":"text"},"source":["General parameters and settings"]},{"cell_type":"code","metadata":{"id":"G3JEBf1fZn9R","colab_type":"code","colab":{}},"source":["input_models_folder = \"/content/drive/My Drive/document-classification/models/final-models/\"\n","output_models_folder = \"/content/drive/My Drive/document-classification/models/feature-fusion\"\n","dataset_path = \"/content/drive/My Drive/document-classification/datasets/rvl-cdip/mini-dataset-1488-288-192\"\n","image_class_model = \"image-class_1488-288-192_valid-acc-67.36\"\n","text_class_model = \"text-class_1488-288-192_valid-acc-59.38\"\n","final_model_name = \"best-fine-tuning\"\n","\n","path_train_ocr = os.path.join(dataset_path, 'train_extracted.csv')\n","path_test_ocr = os.path.join(dataset_path, 'test_extracted.csv')\n","path_valid_ocr = os.path.join(dataset_path, 'valid_extracted.csv')\n","\n","# Shape of the images in input to the CNN\n","cnn_image_shape = (224, 224)\n","# Number of images classes\n","n_classes = 16\n","# Batch size to be used in training\n","batch_size = 32"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5Rc3YUhvaOr1","colab_type":"text"},"source":["# Input Models"]},{"cell_type":"markdown","metadata":{"id":"BDTHjQ6Sh0E3","colab_type":"text"},"source":["Load the VGG model (image classification) and the LSTM based model (text classification) trained in the previous notebooks."]},{"cell_type":"markdown","metadata":{"id":"hoEMGzlfaui0","colab_type":"text"},"source":["## VGG Model"]},{"cell_type":"markdown","metadata":{"id":"VARXe8_0bJGj","colab_type":"text"},"source":["### Data"]},{"cell_type":"code","metadata":{"id":"p-fxMdzpDdgF","colab_type":"code","outputId":"31d94e45-8b8b-4a99-9080-77dc0dec4421","executionInfo":{"status":"ok","timestamp":1592212702815,"user_tz":-120,"elapsed":55676,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":235}},"source":["df_train = pd.read_csv(os.path.join(dataset_path, \"train-labels.csv\"), names=[\"image\", \"label\"])\n","df_valid = pd.read_csv(os.path.join(dataset_path, \"valid-labels.csv\"), names=[\"image\", \"label\"])\n","df_train[\"is_valid\"] = False\n","df_valid[\"is_valid\"] = True\n","df_joined = pd.concat([df_train, df_valid], ignore_index=True)\n","print(df_joined.head())\n","print(df_joined.tail())\n","\n","data_vgg = (ImageList.from_df(df_joined, dataset_path, cols=\"image\")#, folder=mini_dataset_path)\n","        .split_from_df()\n","        .label_from_df()\n","        .transform(size=cnn_image_shape, resize_method=ResizeMethod.SQUISH)\n","        .databunch(bs=batch_size)\n","        .normalize())"],"execution_count":5,"outputs":[{"output_type":"stream","text":["                                 image  label  is_valid\n","0  train/0/0/0/0/94002065_94002066.tif     10     False\n","1         train/0/0/0/1/2074950097.tif     10     False\n","2      train/0/0/0/2/50284095-4103.tif      6     False\n","3           train/0/0/0/3/04003306.tif     10     False\n","4         train/0/0/0/4/2024967978.tif     11     False\n","                                        image  label  is_valid\n","1771             valid/0/2/8/3/0060077830.tif      7      True\n","1772             valid/0/2/8/4/2045723775.tif     15      True\n","1773  valid/0/2/8/5/2062426213_2062426237.tif     12      True\n","1774      valid/0/2/8/6/01747683_01747694.tif     13      True\n","1775               valid/0/2/8/7/10395005.tif      8      True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KVjv7tE5bK28","colab_type":"text"},"source":["### Model"]},{"cell_type":"code","metadata":{"id":"Y3pUjgmoduN1","colab_type":"code","outputId":"2ae8eeb0-07e1-496a-f165-1bfed68133a8","executionInfo":{"status":"ok","timestamp":1592212714792,"user_tz":-120,"elapsed":65612,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["10d6efb82bc742658503d67a7ab58991","3d10f929f96b46dab86986fb32db737f","b545b72ae58940df96e4b58f3bf5b5c3","cf7fedeca4b44800a6434d3f63d6027f","82cb6f4297be4fbe8a0c7c6a9340a28a","0780818904c5454c8b87984827418862","ba9a2fa62c5f4c4e98323071bc2ec5e6","0cb70b021db8481c84e96774f4d8d0ac"]}},"source":["learn_vgg = cnn_learner(data_vgg, models.vgg16_bn, metrics=accuracy,\n","                    model_dir=input_models_folder)\n","learn_vgg.load(image_class_model);\n","learn_vgg.model"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Downloading: \"https://download.pytorch.org/models/vgg16_bn-6c64b313.pth\" to /root/.cache/torch/checkpoints/vgg16_bn-6c64b313.pth\n"],"name":"stderr"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"10d6efb82bc742658503d67a7ab58991","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=553507836.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (7): Dropout(p=0.5, inplace=False)\n","    (8): Linear(in_features=512, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"wQ5eTjJwgxnH","colab_type":"text"},"source":["Remove the final layers from the model:"]},{"cell_type":"code","metadata":{"id":"iwO-kpzmeQmd","colab_type":"code","outputId":"0326a99f-3b47-40a2-e88d-d3b03f1d4d3a","executionInfo":{"status":"ok","timestamp":1592212714794,"user_tz":-120,"elapsed":62166,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.model[-1] = learn_vgg.model[-1][:-3] \n","learn_vgg.model"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"NLjSxjkBa9IF","colab_type":"text"},"source":["## LSTM-based Model (ULMFiT)"]},{"cell_type":"markdown","metadata":{"id":"h7Hj0jKAazs7","colab_type":"text"},"source":["### Data"]},{"cell_type":"code","metadata":{"id":"5XZ0KIAjedn8","colab_type":"code","outputId":"f1f61da5-9abd-446d-8a04-30b696ce9928","executionInfo":{"status":"ok","timestamp":1592212715933,"user_tz":-120,"elapsed":60116,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["df_trn, df_val, df_test = pd.read_csv(path_train_ocr,names=['text','label']), pd.read_csv(path_valid_ocr,names=['text','label']), pd.read_csv(path_test_ocr,names=['text','label'])\n","print(df_trn.shape, df_val.shape, df_test.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(1488, 2) (288, 2) (192, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_XSuZDp1exH0","colab_type":"code","outputId":"01de30e5-d4b9-4660-c4e9-a76325e07118","executionInfo":{"status":"ok","timestamp":1592212727430,"user_tz":-120,"elapsed":69879,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":17}},"source":["# Language model data\n","data_lm = TextLMDataBunch.from_df(train_df = df_trn, valid_df = df_val, path = \"\",\n","                                  text_cols=\"text\", label_cols=\"label\")\n","# Classifier model data\n","data_clas = TextClasDataBunch.from_df(path = \"\", train_df = df_trn, valid_df = df_val,\n","                                      text_cols=\"text\", label_cols=\"label\", vocab=data_lm.train_ds.vocab, bs=batch_size)"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"38p0TVX0a1tE","colab_type":"text"},"source":["### Model"]},{"cell_type":"code","metadata":{"id":"zQ5Sbfr4e4VU","colab_type":"code","outputId":"51b74e92-7dfc-4bbc-adaa-0e66a262637a","executionInfo":{"status":"ok","timestamp":1592212761369,"user_tz":-120,"elapsed":99658,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":726}},"source":["#learn_ocr = language_model_learner(data_lm, arch=AWD_LSTM, drop_mult=0.7, model_dir=models_folder_path)\n","\n","learn_text = text_classifier_learner(data_clas, arch=AWD_LSTM, drop_mult=0.7,\n","                                     model_dir=input_models_folder)\n","learn_text.load(text_class_model)\n","learn_text.model"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Downloading https://s3.amazonaws.com/fast-ai-modelzoo/wt103-fwd.tgz\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["SequentialRNN(\n","  (0): MultiBatchEncoder(\n","    (module): AWD_LSTM(\n","      (encoder): Embedding(15392, 400, padding_idx=1)\n","      (encoder_dp): EmbeddingDropout(\n","        (emb): Embedding(15392, 400, padding_idx=1)\n","      )\n","      (rnns): ModuleList(\n","        (0): WeightDropout(\n","          (module): LSTM(400, 1152, batch_first=True)\n","        )\n","        (1): WeightDropout(\n","          (module): LSTM(1152, 1152, batch_first=True)\n","        )\n","        (2): WeightDropout(\n","          (module): LSTM(1152, 400, batch_first=True)\n","        )\n","      )\n","      (input_dp): RNNDropout()\n","      (hidden_dps): ModuleList(\n","        (0): RNNDropout()\n","        (1): RNNDropout()\n","        (2): RNNDropout()\n","      )\n","    )\n","  )\n","  (1): PoolingLinearClassifier(\n","    (layers): Sequential(\n","      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): Dropout(p=0.27999999999999997, inplace=False)\n","      (2): Linear(in_features=1200, out_features=50, bias=True)\n","      (3): ReLU(inplace=True)\n","      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): Dropout(p=0.1, inplace=False)\n","      (6): Linear(in_features=50, out_features=16, bias=True)\n","    )\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"BpjHs2xFhBMA","colab_type":"text"},"source":["Remove the final layers from the model (according to https://gist.github.com/joshfp/b62b76eae95e6863cb511997b5a63118)"]},{"cell_type":"code","metadata":{"id":"f_ddKCxZfNzF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":654},"outputId":"85c392b7-12a5-4467-b32f-f5b0b63306bf","executionInfo":{"status":"ok","timestamp":1592212761370,"user_tz":-120,"elapsed":96892,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}}},"source":["learn_text.model[-1].layers = learn_text.model[-1].layers[:-3] \n","learn_text.model"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SequentialRNN(\n","  (0): MultiBatchEncoder(\n","    (module): AWD_LSTM(\n","      (encoder): Embedding(15392, 400, padding_idx=1)\n","      (encoder_dp): EmbeddingDropout(\n","        (emb): Embedding(15392, 400, padding_idx=1)\n","      )\n","      (rnns): ModuleList(\n","        (0): WeightDropout(\n","          (module): LSTM(400, 1152, batch_first=True)\n","        )\n","        (1): WeightDropout(\n","          (module): LSTM(1152, 1152, batch_first=True)\n","        )\n","        (2): WeightDropout(\n","          (module): LSTM(1152, 400, batch_first=True)\n","        )\n","      )\n","      (input_dp): RNNDropout()\n","      (hidden_dps): ModuleList(\n","        (0): RNNDropout()\n","        (1): RNNDropout()\n","        (2): RNNDropout()\n","      )\n","    )\n","  )\n","  (1): PoolingLinearClassifier(\n","    (layers): Sequential(\n","      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): Dropout(p=0.27999999999999997, inplace=False)\n","      (2): Linear(in_features=1200, out_features=50, bias=True)\n","      (3): ReLU(inplace=True)\n","    )\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"OAYEuveEfclc","colab_type":"text"},"source":["# Concatenated Model"]},{"cell_type":"markdown","metadata":{"id":"q5hfaaxvidMI","colab_type":"text"},"source":["Combine the two previous models into a new one. Doing this, the new model will classify using both visual and textual features."]},{"cell_type":"markdown","metadata":{"id":"aH7fKnHSnLiR","colab_type":"text"},"source":["## Data"]},{"cell_type":"markdown","metadata":{"id":"sBoo3jY5blEO","colab_type":"text"},"source":["Define a custom PyTorch Dataset to concat the two datasets (images and text).\n","\n","When an element of the Dataset is requested (\\_\\_getitem\\__ method) resize the corresponding image to the target size before returning it along with the text and the label.\n","\n","N.B.: passing an ImageList could not be memory efficient (check how fastai manage the images in ImageList). Consider passing a list of paths and loading the image in \\_\\_getItem\\_\\_"]},{"cell_type":"code","metadata":{"id":"dTtMBAWXff4k","colab_type":"code","colab":{}},"source":["# Per accedere ad alcune funzionalità di fastai è necessario definire cose aggiuntive\n","# nel Dataset\n","class ConcatDataset(Dataset):\n","    def __init__(self, x_images: ImageList, x_texts: TextList, y): \n","        self.x_images = x_images\n","        self.x_texts = x_texts\n","        self.y = y\n","\n","    def __len__(self):\n","        return len(self.y)\n","    \n","    def __getitem__(self, i):\n","        return (self.x_images[i].apply_tfms([], size=cnn_image_shape, resize_method=ResizeMethod.SQUISH),\n","                                      self.x_texts[i]), self.y[i]\n","\n","train_ds = ConcatDataset(data_vgg.train_ds.x, data_clas.train_ds.x, data_vgg.train_ds.y)\n","valid_ds = ConcatDataset(data_vgg.valid_ds.x, data_clas.valid_ds.x, data_vgg.valid_ds.y)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AqZH5ERoe1XH","colab_type":"text"},"source":["Define a collate function to pass to the DataBunch. This function will replace the one used by the Dataloader and describe how to collate the samples taken for a batch from the ConcatDataset."]},{"cell_type":"code","metadata":{"id":"xLv_ovjGfKhm","colab_type":"code","colab":{}},"source":["def my_collate(batch):\n","    x,y = list(zip(*batch))\n","    x1,x2 = list(zip(*x))\n","    x1 = to_data(x1)\n","    x1 = torch.stack(x1)\n","    x2, y = pad_collate(list(zip(x2, y)), pad_idx=1, pad_first=True)\n","    \n","    return (x1, x2), y"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oDXAXxZxfgc6","colab_type":"text"},"source":["The following two cells were used in the example taken from https://gist.github.com/joshfp/b62b76eae95e6863cb511997b5a63118.\n","\n","The Sampler would allow to random sort data, but their behaviour is not clear to us.\n","We found simpler letting the DataBunch automatic creating the DataLoaders."]},{"cell_type":"code","metadata":{"id":"ofabJecQk3X4","colab_type":"code","colab":{}},"source":["# Sono dei sampler usati per dati testuali che aggiungono randomicità nella fornitura dei \n","# dati al learner (a quanto ho capito)\n","# train_sampler = SortishSampler(data_clas.train_ds.x, key=lambda t: len(data_clas.train_ds[t][0].data), bs=batch_size)\n","# valid_sampler = SortSampler(data_clas.valid_ds.x, key=lambda t: len(data_clas.valid_ds[t][0].data))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IAczzAmxk-AE","colab_type":"code","colab":{}},"source":["# train_dl = DataLoader(train_ds, batch_size, sampler=train_sampler)\n","# valid_dl = DataLoader(valid_ds, batch_size, sampler=valid_sampler)\n","\n","# data = DataBunch(train_dl, valid_dl, device=defaults.device, collate_fn=my_collate, path=dataset_path)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y5soXFj4gkCY","colab_type":"text"},"source":["Create the DataBunch from the custom datasets and the collate function."]},{"cell_type":"code","metadata":{"id":"6cVrPn38gsxX","colab_type":"code","colab":{}},"source":["data = DataBunch.create(train_ds, valid_ds, collate_fn=my_collate, path=dataset_path, bs=batch_size)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0bCaaM7I1oFm","colab_type":"code","outputId":"5cf50fee-ff96-45dd-af30-a6d89922bd5e","executionInfo":{"status":"ok","timestamp":1592208209674,"user_tz":-120,"elapsed":116885,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["data.one_batch()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([tensor([[[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.9725, 0.7824, 0.7824,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.9725, 0.7824, 0.7824,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [0.9725, 0.7824, 0.7824,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          ...,\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]],\n","  \n","  \n","          [[[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]],\n","  \n","           [[1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            ...,\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000],\n","            [1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000]]]]),\n","  tensor([[   1,    1,    1,  ...,  290, 4127,    0],\n","          [   1,    1,    1,  ...,    9,    0,    0],\n","          [   1,    1,    1,  ...,  813,    0,    0],\n","          ...,\n","          [   1,    1,    1,  ...,   70,  123,    9],\n","          [   1,    1,    1,  ..., 5091,    0,    0],\n","          [   1,    1,    1,  ...,  143, 1848,  622]])],\n"," tensor([ 5, 13, 15,  3,  1,  9,  0,  8,  4, 15, 12,  6,  8,  4, 10,  2,  0,  2,\n","          4,  7, 12, 11, 14,  4,  9, 12,  6,  8,  5,  2, 13,  2]))"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"og60OiHIpPky","colab_type":"text"},"source":["## Model with only a softmax"]},{"cell_type":"markdown","metadata":{"id":"SuL4I1p-l1y7","colab_type":"text"},"source":["Define the new model taking the other two and adding linear layers at the end.\n","\n","The size of the input to the first linear layer must agree with the output of the other two models."]},{"cell_type":"code","metadata":{"id":"BU8qHKqZpUN9","colab_type":"code","colab":{}},"source":["class ConcatModel(nn.Module):\n","    def __init__(self, mod_cnn, mod_nlp, layers, drops): \n","        super().__init__()\n","        self.mod_cnn = mod_cnn\n","        self.mod_nlp = mod_nlp\n","        # Da modificare\n","        lst_layers = []\n","        activs = [nn.ReLU(inplace=True),] * (len(layers)-2) + [None]\n","        for n_in,n_out,p,actn in zip(layers[:-1], layers[1:], drops, activs):\n","            lst_layers += bn_drop_lin(n_in, n_out, p=p, actn=actn)\n","        self.layers = nn.Sequential(*lst_layers)\n","\n","    def forward(self, x_cnn, x_nlp):\n","        x_cnn = self.mod_cnn(x_cnn)\n","        # perchè [0]? Rimuovere? -> Forse perche il cat si aspetta la stessa \n","        # dimensione dei tensori lungo la dim=0 e x_nlp diventa multidim?\n","        x_nlp = self.mod_nlp(x_nlp)[0]\n","        x = torch.cat([x_cnn, x_nlp], dim=1)\n","        return self.layers(x)    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4vp27FipbbE","colab_type":"code","outputId":"179aec21-ce1b-4296-bd64-c513e50ff5a6","executionInfo":{"status":"ok","timestamp":1592212761375,"user_tz":-120,"elapsed":77237,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["lin_layers = [512+50, 16]\n","ps = [0.8]\n","model = ConcatModel(learn_vgg.model, learn_text.model, lin_layers, ps)\n","model"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ConcatModel(\n","  (mod_cnn): Sequential(\n","    (0): Sequential(\n","      (0): Sequential(\n","        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (2): ReLU(inplace=True)\n","        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (5): ReLU(inplace=True)\n","        (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (9): ReLU(inplace=True)\n","        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (12): ReLU(inplace=True)\n","        (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (16): ReLU(inplace=True)\n","        (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (19): ReLU(inplace=True)\n","        (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (22): ReLU(inplace=True)\n","        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (26): ReLU(inplace=True)\n","        (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (29): ReLU(inplace=True)\n","        (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (32): ReLU(inplace=True)\n","        (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (36): ReLU(inplace=True)\n","        (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (39): ReLU(inplace=True)\n","        (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (42): ReLU(inplace=True)\n","        (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      )\n","      (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","    )\n","    (1): Sequential(\n","      (0): AdaptiveConcatPool2d(\n","        (ap): AdaptiveAvgPool2d(output_size=1)\n","        (mp): AdaptiveMaxPool2d(output_size=1)\n","      )\n","      (1): Flatten()\n","      (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (3): Dropout(p=0.25, inplace=False)\n","      (4): Linear(in_features=1024, out_features=512, bias=True)\n","      (5): ReLU(inplace=True)\n","    )\n","  )\n","  (mod_nlp): SequentialRNN(\n","    (0): MultiBatchEncoder(\n","      (module): AWD_LSTM(\n","        (encoder): Embedding(15392, 400, padding_idx=1)\n","        (encoder_dp): EmbeddingDropout(\n","          (emb): Embedding(15392, 400, padding_idx=1)\n","        )\n","        (rnns): ModuleList(\n","          (0): WeightDropout(\n","            (module): LSTM(400, 1152, batch_first=True)\n","          )\n","          (1): WeightDropout(\n","            (module): LSTM(1152, 1152, batch_first=True)\n","          )\n","          (2): WeightDropout(\n","            (module): LSTM(1152, 400, batch_first=True)\n","          )\n","        )\n","        (input_dp): RNNDropout()\n","        (hidden_dps): ModuleList(\n","          (0): RNNDropout()\n","          (1): RNNDropout()\n","          (2): RNNDropout()\n","        )\n","      )\n","    )\n","    (1): PoolingLinearClassifier(\n","      (layers): Sequential(\n","        (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (1): Dropout(p=0.27999999999999997, inplace=False)\n","        (2): Linear(in_features=1200, out_features=50, bias=True)\n","        (3): ReLU(inplace=True)\n","      )\n","    )\n","  )\n","  (layers): Sequential(\n","    (0): BatchNorm1d(562, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (1): Dropout(p=0.8, inplace=False)\n","    (2): Linear(in_features=562, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"cXsmSckG3VTN","colab_type":"text"},"source":["## Model with a linear layer and a softmax\n","\n","Define the new model taking the other two and adding linear layers at the end.\n","\n","The size of the input to the first linear layer must agree with the output of the other two models."]},{"cell_type":"code","metadata":{"id":"BUVXJG2f3Yfp","colab_type":"code","outputId":"bd824017-3768-4ffd-a04c-1e1e3f44b508","executionInfo":{"status":"ok","timestamp":1592123217623,"user_tz":-120,"elapsed":374057,"user":{"displayName":"JASON RAVAGLI","photoUrl":"","userId":"01884994422007125599"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["class ConcatModel(nn.Module):\n","    def __init__(self, mod_cnn, mod_nlp, input_dim, output_dim): \n","        super().__init__()\n","        self.mod_cnn = mod_cnn\n","        self.mod_nlp = mod_nlp\n","        \n","        # Final custom part\n","        n_neurons = 1024\n","        last_layers = []\n","        last_layers += bn_drop_lin(input_dim, n_neurons, p=0.5, actn=nn.ReLU(inplace=True)) #see the dropout\n","        last_layers += bn_drop_lin(n_neurons, output_dim, p=0.5)\n","        self.layers = nn.Sequential(*last_layers)\n","\n","    def forward(self, x_cnn, x_nlp):\n","        x_cnn = self.mod_cnn(x_cnn)\n","        # perchè [0]? Rimuovere? -> Forse perche il cat si aspetta la stessa \n","        # dimensione dei tensori lungo la dim=0 e x_nlp diventa multidim?\n","        x_nlp = self.mod_nlp(x_nlp)[0]\n","        x = torch.cat([x_cnn, x_nlp], dim=1)\n","        return self.layers(x)    \n","\n","input_dim = 512+50\n","output_dim = 16\n","model = ConcatModel(learn_vgg.model, learn_text.model, input_dim, output_dim)\n","model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ConcatModel(\n","  (mod_cnn): Sequential(\n","    (0): Sequential(\n","      (0): Sequential(\n","        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (2): ReLU(inplace=True)\n","        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (5): ReLU(inplace=True)\n","        (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (9): ReLU(inplace=True)\n","        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (12): ReLU(inplace=True)\n","        (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (16): ReLU(inplace=True)\n","        (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (19): ReLU(inplace=True)\n","        (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (22): ReLU(inplace=True)\n","        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (26): ReLU(inplace=True)\n","        (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (29): ReLU(inplace=True)\n","        (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (32): ReLU(inplace=True)\n","        (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (36): ReLU(inplace=True)\n","        (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (39): ReLU(inplace=True)\n","        (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (42): ReLU(inplace=True)\n","        (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      )\n","      (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","    )\n","    (1): Sequential(\n","      (0): AdaptiveConcatPool2d(\n","        (ap): AdaptiveAvgPool2d(output_size=1)\n","        (mp): AdaptiveMaxPool2d(output_size=1)\n","      )\n","      (1): Flatten()\n","      (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (3): Dropout(p=0.25, inplace=False)\n","      (4): Linear(in_features=1024, out_features=512, bias=True)\n","      (5): ReLU(inplace=True)\n","    )\n","  )\n","  (mod_nlp): SequentialRNN(\n","    (0): MultiBatchEncoder(\n","      (module): AWD_LSTM(\n","        (encoder): Embedding(15392, 400, padding_idx=1)\n","        (encoder_dp): EmbeddingDropout(\n","          (emb): Embedding(15392, 400, padding_idx=1)\n","        )\n","        (rnns): ModuleList(\n","          (0): WeightDropout(\n","            (module): LSTM(400, 1152, batch_first=True)\n","          )\n","          (1): WeightDropout(\n","            (module): LSTM(1152, 1152, batch_first=True)\n","          )\n","          (2): WeightDropout(\n","            (module): LSTM(1152, 400, batch_first=True)\n","          )\n","        )\n","        (input_dp): RNNDropout()\n","        (hidden_dps): ModuleList(\n","          (0): RNNDropout()\n","          (1): RNNDropout()\n","          (2): RNNDropout()\n","        )\n","      )\n","    )\n","    (1): PoolingLinearClassifier(\n","      (layers): Sequential(\n","        (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (1): Dropout(p=0.27999999999999997, inplace=False)\n","        (2): Linear(in_features=1200, out_features=50, bias=True)\n","        (3): ReLU(inplace=True)\n","      )\n","    )\n","  )\n","  (layers): Sequential(\n","    (0): BatchNorm1d(562, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (1): Dropout(p=0.5, inplace=False)\n","    (2): Linear(in_features=562, out_features=1024, bias=True)\n","    (3): ReLU(inplace=True)\n","    (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (5): Dropout(p=0.5, inplace=False)\n","    (6): Linear(in_features=1024, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"ofNKNyU6qLm5","colab_type":"text"},"source":["## Learner"]},{"cell_type":"code","metadata":{"id":"EsO0RZXRnjOq","colab_type":"code","outputId":"400f5568-d43b-4c66-f0eb-4a6c79cf7e73","executionInfo":{"status":"ok","timestamp":1592212761376,"user_tz":-120,"elapsed":69968,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["print(len(learn_text.layer_groups))\n","print(len(learn_vgg.layer_groups))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["5\n","3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VailNOCcZseh","colab_type":"code","outputId":"af51d913-0beb-4dcc-b5f2-a49c4cf1c123","executionInfo":{"status":"ok","timestamp":1592212761376,"user_tz":-120,"elapsed":68487,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.model"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"KHq3iYh0ZPq4","colab_type":"code","outputId":"804f90e4-e4a5-4057-8b5f-d9a3fd683f3d","executionInfo":{"status":"ok","timestamp":1592212761377,"user_tz":-120,"elapsed":66108,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.layer_groups"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Sequential(\n","   (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (2): ReLU(inplace=True)\n","   (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (5): ReLU(inplace=True)\n","   (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (9): ReLU(inplace=True)\n","   (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (12): ReLU(inplace=True)\n","   (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (16): ReLU(inplace=True)\n","   (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (19): ReLU(inplace=True)\n","   (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n"," ), Sequential(\n","   (0): ReLU(inplace=True)\n","   (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (4): ReLU(inplace=True)\n","   (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (7): ReLU(inplace=True)\n","   (8): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (10): ReLU(inplace=True)\n","   (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (12): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (13): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (14): ReLU(inplace=True)\n","   (15): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (17): ReLU(inplace=True)\n","   (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (20): ReLU(inplace=True)\n","   (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (22): AdaptiveAvgPool2d(output_size=(7, 7))\n"," ), Sequential(\n","   (0): AdaptiveAvgPool2d(output_size=1)\n","   (1): AdaptiveMaxPool2d(output_size=1)\n","   (2): Flatten()\n","   (3): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (4): Dropout(p=0.25, inplace=False)\n","   (5): Linear(in_features=1024, out_features=512, bias=True)\n","   (6): ReLU(inplace=True)\n","   (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (8): Dropout(p=0.5, inplace=False)\n","   (9): Linear(in_features=512, out_features=16, bias=True)\n"," )]"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"Ld4gb5R5c6bT","colab_type":"text"},"source":["Define layer groups for the new model. Reuse the two other models layer groups and add a group with the new final layers.\n","\n","N.B. Separate the CNN linear layers from the last convolutional section into a new group (Do it in the notebook 2)"]},{"cell_type":"code","metadata":{"id":"OhHhmmX9qRWl","colab_type":"code","colab":{}},"source":["loss_func = nn.CrossEntropyLoss()\n","# Serve per il discriminative layer training -> serve per dare learning rates diversi\n","# ad ogni gruppo\n","# Approfondire quali layer appartengono ai gruppi\n","layer_groups = [nn.Sequential(*flatten_model(learn_text.layer_groups[0])),\n","                nn.Sequential(*flatten_model(learn_text.layer_groups[1])),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[2]) + \n","                                flatten_model(learn_vgg.layer_groups[0]))),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[3]) + \n","                                flatten_model(learn_vgg.layer_groups[1]))),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[4]) + \n","                                flatten_model(learn_vgg.layer_groups[2]))),\n","                nn.Sequential(*flatten_model(model.layers))]\n","\n","learn = Learner(data, model, loss_func=loss_func, metrics=accuracy, layer_groups=layer_groups,\n","                path=output_models_folder)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tizW_P_AqQc9","colab_type":"text"},"source":["# Training"]},{"cell_type":"code","metadata":{"id":"vViMd6Q5o8Ir","colab_type":"code","colab":{}},"source":["# Congela tutti i gruppi di layer in layer_groups tranne nell'ultimo (i fully connected)\n","learn.freeze()\n","# learn.summary() -> non funziona per via del custom dataset"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XG5YUZUKnh4y","colab_type":"text"},"source":["Find the best learning rate studying its trend (Experimental).\n","\n","This function has been taken from this post: https://forums.fast.ai/t/automated-learning-rate-suggester/44199"]},{"cell_type":"code","metadata":{"id":"2SF2uu12nv2K","colab_type":"code","outputId":"42549c91-0ffa-4d81-d242-4cf83b896404","executionInfo":{"status":"ok","timestamp":1592213109326,"user_tz":-120,"elapsed":331233,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":685}},"source":["def find_appropriate_lr(model:Learner, lr_diff:int = 15, loss_threshold:float = .05, adjust_value:float = 1, plot:bool = False) -> float:\n","    #Run the Learning Rate Finder\n","    model.lr_find()\n","    \n","    #Get loss values and their corresponding gradients, and get lr values\n","    losses = np.array(model.recorder.losses)\n","    assert(lr_diff < len(losses))\n","    loss_grad = np.gradient(losses)\n","    lrs = model.recorder.lrs\n","    \n","    #Search for index in gradients where loss is lowest before the loss spike\n","    #Initialize right and left idx using the lr_diff as a spacing unit\n","    #Set the local min lr as -1 to signify if threshold is too low\n","    r_idx = -1\n","    l_idx = r_idx - lr_diff\n","    while (l_idx >= -len(losses)) and (abs(loss_grad[r_idx] - loss_grad[l_idx]) > loss_threshold):\n","        local_min_lr = lrs[l_idx]\n","        r_idx -= 1\n","        l_idx -= 1\n","\n","    lr_to_use = local_min_lr * adjust_value\n","    \n","    if plot:\n","        # plots the gradients of the losses in respect to the learning rate change\n","        plt.plot(loss_grad)\n","        plt.plot(len(losses)+l_idx, loss_grad[l_idx],markersize=10,marker='o',color='red')\n","        plt.ylabel(\"Loss\")\n","        plt.xlabel(\"Index of LRs\")\n","        plt.show()\n","\n","        plt.plot(np.log10(lrs), losses)\n","        plt.ylabel(\"Loss\")\n","        plt.xlabel(\"Log 10 Transform of Learning Rate\")\n","        loss_coord = np.interp(np.log10(lr_to_use), np.log10(lrs), losses)\n","        plt.plot(np.log10(lr_to_use), loss_coord, markersize=10,marker='o',color='red')\n","        plt.show()\n","        \n","    return lr_to_use\n","\n","learning_rate = find_appropriate_lr(learn, plot=True)\n","print(f\"Learning rate: {learning_rate}\")"],"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='1' class='' max='3' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      33.33% [1/3 04:22<08:44]\n","    </div>\n","    \n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>3.598286</td>\n","      <td>#na#</td>\n","      <td>04:22</td>\n","    </tr>\n","  </tbody>\n","</table><p>\n","\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='41' class='' max='46' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      89.13% [41/46 01:02<00:07 8.4718]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["Learning rate: 0.005248074602497722\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3f6yZ7PeGxxl","colab_type":"text"},"source":["Train the network."]},{"cell_type":"code","metadata":{"id":"421dYBJsHIMz","colab_type":"code","outputId":"71e59b2f-0ae3-4c9f-f3ba-b7fcf249552c","executionInfo":{"status":"error","timestamp":1592211775151,"user_tz":-120,"elapsed":3514769,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["save_model = SaveModelCallback(learn, every=\"improvement\", monitor=\"accuracy\",\n","                               mode=\"max\", name=\"best-first-step-nodenselayer\")\n","learn.fit_one_cycle(10, max_lr=learning_rate, callbacks=[save_model])\n","print(\"Training completed\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='34' class='' max='75' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      45.33% [34/75 51:12<1:01:44]\n","    </div>\n","    \n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>3.040254</td>\n","      <td>2.328184</td>\n","      <td>0.368056</td>\n","      <td>02:58</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>2.490463</td>\n","      <td>1.826996</td>\n","      <td>0.531250</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>1.906196</td>\n","      <td>1.451107</td>\n","      <td>0.638889</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>1.394003</td>\n","      <td>1.232143</td>\n","      <td>0.652778</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>1.024067</td>\n","      <td>1.111627</td>\n","      <td>0.697917</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.722535</td>\n","      <td>1.075291</td>\n","      <td>0.704861</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.529940</td>\n","      <td>1.048354</td>\n","      <td>0.694444</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.379819</td>\n","      <td>1.037066</td>\n","      <td>0.711806</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.300689</td>\n","      <td>1.075570</td>\n","      <td>0.711806</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.259366</td>\n","      <td>1.147713</td>\n","      <td>0.694444</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.256602</td>\n","      <td>1.298510</td>\n","      <td>0.677083</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.250976</td>\n","      <td>1.280627</td>\n","      <td>0.645833</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.252151</td>\n","      <td>1.372315</td>\n","      <td>0.697917</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.286491</td>\n","      <td>1.470289</td>\n","      <td>0.659722</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.385774</td>\n","      <td>1.587027</td>\n","      <td>0.645833</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.437505</td>\n","      <td>1.588573</td>\n","      <td>0.663194</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.502933</td>\n","      <td>1.707373</td>\n","      <td>0.666667</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.565171</td>\n","      <td>1.852117</td>\n","      <td>0.604167</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.627270</td>\n","      <td>1.813579</td>\n","      <td>0.673611</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.689110</td>\n","      <td>1.910812</td>\n","      <td>0.670139</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.744693</td>\n","      <td>1.765283</td>\n","      <td>0.652778</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>21</td>\n","      <td>0.707447</td>\n","      <td>2.207760</td>\n","      <td>0.663194</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>22</td>\n","      <td>0.675555</td>\n","      <td>1.934027</td>\n","      <td>0.638889</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>23</td>\n","      <td>0.705803</td>\n","      <td>1.833018</td>\n","      <td>0.673611</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>24</td>\n","      <td>0.724245</td>\n","      <td>2.092700</td>\n","      <td>0.680556</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>25</td>\n","      <td>0.707891</td>\n","      <td>1.748360</td>\n","      <td>0.694444</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>26</td>\n","      <td>0.713791</td>\n","      <td>1.884887</td>\n","      <td>0.666667</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>27</td>\n","      <td>0.752802</td>\n","      <td>1.939517</td>\n","      <td>0.673611</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>28</td>\n","      <td>0.749368</td>\n","      <td>1.926214</td>\n","      <td>0.670139</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>29</td>\n","      <td>0.751582</td>\n","      <td>1.812148</td>\n","      <td>0.690972</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>30</td>\n","      <td>0.719435</td>\n","      <td>1.771617</td>\n","      <td>0.687500</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>31</td>\n","      <td>0.652750</td>\n","      <td>1.724108</td>\n","      <td>0.711806</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>32</td>\n","      <td>0.662755</td>\n","      <td>2.088625</td>\n","      <td>0.652778</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>33</td>\n","      <td>0.646202</td>\n","      <td>1.973422</td>\n","      <td>0.673611</td>\n","      <td>01:28</td>\n","    </tr>\n","  </tbody>\n","</table><p>\n","\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='26' class='' max='46' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      56.52% [26/46 00:43<00:33 0.6090]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Better model found at epoch 0 with accuracy value: 0.3680555522441864.\n","Better model found at epoch 1 with accuracy value: 0.53125.\n","Better model found at epoch 2 with accuracy value: 0.6388888955116272.\n","Better model found at epoch 3 with accuracy value: 0.6527777910232544.\n","Better model found at epoch 4 with accuracy value: 0.6979166865348816.\n","Better model found at epoch 5 with accuracy value: 0.7048611044883728.\n","Better model found at epoch 7 with accuracy value: 0.7118055820465088.\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-9208131c3140>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m save_model = SaveModelCallback(learn, every=\"improvement\", monitor=\"accuracy\",\n\u001b[1;32m      2\u001b[0m                                mode=\"max\", name=\"best-first-step-nodenselayer\")\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_one_cycle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_lr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlearning_rate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msave_model\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Training completed\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mfit_one_cycle\u001b[0;34m(learn, cyc_len, max_lr, moms, div_factor, pct_start, final_div, wd, callbacks, tot_epochs, start_epoch)\u001b[0m\n\u001b[1;32m     21\u001b[0m     callbacks.append(OneCycleScheduler(learn, max_lr, moms=moms, div_factor=div_factor, pct_start=pct_start,\n\u001b[1;32m     22\u001b[0m                                        final_div=final_div, tot_epochs=tot_epochs, start_epoch=start_epoch))\n\u001b[0;32m---> 23\u001b[0;31m     \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcyc_len\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m def fit_fc(learn:Learner, tot_epochs:int=1, lr:float=defaults.lr,  moms:Tuple[float,float]=(0.95,0.85), start_pct:float=0.72,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, epochs, lr, wd, callbacks)\u001b[0m\n\u001b[1;32m    198\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mwd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m         \u001b[0mcallbacks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallback_fns\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextra_callback_fns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m         \u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcreate_opt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(epochs, learn, callbacks, metrics)\u001b[0m\n\u001b[1;32m     99\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0myb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprogress_bar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpbar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m                 \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 101\u001b[0;31m                 \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mloss_batch\u001b[0;34m(model, xb, yb, loss_func, opt, cb_handler)\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mopt\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mskip_bwd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_backward_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mskip_bwd\u001b[0m\u001b[0;34m:\u001b[0m                     \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_backward_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mopt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/callback.py\u001b[0m in \u001b[0;36mon_backward_begin\u001b[0;34m(self, loss)\u001b[0m\n\u001b[1;32m    288\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_backward_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m         \u001b[0;34m\"Handle gradient calculation on `loss`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msmoothener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'last_loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'smooth_loss'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msmoothener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msmooth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'backward_begin'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcall_mets\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"OM7Zy8-teOsj","colab_type":"text"},"source":["## Unfreezing and fine-tuning"]},{"cell_type":"markdown","metadata":{"id":"pWW1PX4oebRo","colab_type":"text"},"source":["In this section, we unfreeze the convolutional layers and fine-tune the whole model."]},{"cell_type":"code","metadata":{"id":"K6iBeH5reSJu","colab_type":"code","colab":{}},"source":["# Load the best model from the previous stage of training\n","learn.load(\"best-first-step-nodenselayer\")\n","learn.unfreeze()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i8ED1y09eyng","colab_type":"text"},"source":["Study the learning rate trend to appropriately set a range of values for the fine tuning process."]},{"cell_type":"code","metadata":{"id":"Q_Y3_xU7e_W4","colab_type":"code","colab":{}},"source":["learn.lr_find()\n","learn.recorder.plot()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GT1cXvDyh_T3","colab_type":"text"},"source":["Unfreeze the layers and train the network with a learning rate ranging from 1e-6 (for the first layer) to 1e-2 (for the last layer).\n","\n","Adjust early stopping settings before fine tuning (fine tuning requires less epochs)."]},{"cell_type":"code","metadata":{"id":"A8DtZI3XiTxa","colab_type":"code","outputId":"f888b056-4313-44e4-c152-0f70b9f6087a","executionInfo":{"status":"ok","timestamp":1592215168817,"user_tz":-120,"elapsed":1553869,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":439}},"source":["save_model = SaveModelCallback(learn, every=\"improvement\", monitor=\"accuracy\",\n","                               mode=\"max\", name=\"beste-nodenselayer-final\")\n","\n","learn.fit_one_cycle(10, max_lr=slice(1e-5,6e-5), callbacks=[save_model])\n","print(\"Fine tuning completed\")"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>0.263587</td>\n","      <td>1.042664</td>\n","      <td>0.697917</td>\n","      <td>03:17</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>0.273109</td>\n","      <td>1.046603</td>\n","      <td>0.715278</td>\n","      <td>02:26</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.252219</td>\n","      <td>1.066345</td>\n","      <td>0.697917</td>\n","      <td>02:24</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.225960</td>\n","      <td>1.045183</td>\n","      <td>0.711806</td>\n","      <td>02:28</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.188434</td>\n","      <td>1.008092</td>\n","      <td>0.711806</td>\n","      <td>02:29</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.188490</td>\n","      <td>1.046351</td>\n","      <td>0.718750</td>\n","      <td>02:27</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.162064</td>\n","      <td>1.070818</td>\n","      <td>0.704861</td>\n","      <td>02:31</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.141365</td>\n","      <td>1.030052</td>\n","      <td>0.732639</td>\n","      <td>02:30</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.135632</td>\n","      <td>1.043828</td>\n","      <td>0.725694</td>\n","      <td>02:31</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.127751</td>\n","      <td>1.036919</td>\n","      <td>0.725694</td>\n","      <td>02:31</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Better model found at epoch 0 with accuracy value: 0.6979166865348816.\n","Better model found at epoch 1 with accuracy value: 0.7152777910232544.\n","Better model found at epoch 5 with accuracy value: 0.71875.\n","Better model found at epoch 7 with accuracy value: 0.7326388955116272.\n","Fine tuning completed\n"],"name":"stdout"}]}]}