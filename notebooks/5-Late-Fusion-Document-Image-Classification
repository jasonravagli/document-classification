{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"5-Late-Fusion-Document-Image-Classification","provenance":[],"collapsed_sections":["NLjSxjkBa9IF"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"94ad0b3df5b94ac8942ff01e66d14656":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_e0059157caa34bc297b12f63ed176ad4","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_31a6bcd5b0df4f71bb385425c1b97113","IPY_MODEL_459ca4daef7b45cd965a9c4633ff2ba7"]}},"e0059157caa34bc297b12f63ed176ad4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"31a6bcd5b0df4f71bb385425c1b97113":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_d85f0429c11748c29a5ae7840739e61f","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":553507836,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":553507836,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_87b53844ac4a47ad9fc9e3714bf08867"}},"459ca4daef7b45cd965a9c4633ff2ba7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_4f9cdac5ed0d406684d6d8c3bf072c08","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 528M/528M [00:06&lt;00:00, 85.5MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_cd718187a633412f9ca606a2bd1c5d74"}},"d85f0429c11748c29a5ae7840739e61f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"87b53844ac4a47ad9fc9e3714bf08867":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4f9cdac5ed0d406684d6d8c3bf072c08":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"cd718187a633412f9ca606a2bd1c5d74":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"u-pfXw83ZF9V","colab_type":"text"},"source":["# Setup\n","\n","\n","> Import libraries\n","\n","> Import Drive\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"755J3fS5Y7Ec","colab_type":"code","outputId":"63d55c31-56a4-4609-da9a-c79ac1cd6c90","executionInfo":{"status":"ok","timestamp":1592158080697,"user_tz":-120,"elapsed":146449,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":346}},"source":["!pip install \"torch==1.4\" \"torchvision==0.5.0\""],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting torch==1.4\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/24/19/4804aea17cd136f1705a5e98a00618cb8f6ccc375ad8bfa437408e09d058/torch-1.4.0-cp36-cp36m-manylinux1_x86_64.whl (753.4MB)\n","\u001b[K     |████████████████████████████████| 753.4MB 21kB/s \n","\u001b[?25hCollecting torchvision==0.5.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7e/90/6141bf41f5655c78e24f40f710fdd4f8a8aff6c8b7c6f0328240f649bdbe/torchvision-0.5.0-cp36-cp36m-manylinux1_x86_64.whl (4.0MB)\n","\u001b[K     |████████████████████████████████| 4.0MB 35.7MB/s \n","\u001b[?25hRequirement already satisfied: pillow>=4.1.1 in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (7.0.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (1.18.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from torchvision==0.5.0) (1.12.0)\n","Installing collected packages: torch, torchvision\n","  Found existing installation: torch 1.5.0+cu101\n","    Uninstalling torch-1.5.0+cu101:\n","      Successfully uninstalled torch-1.5.0+cu101\n","  Found existing installation: torchvision 0.6.0+cu101\n","    Uninstalling torchvision-0.6.0+cu101:\n","      Successfully uninstalled torchvision-0.6.0+cu101\n","Successfully installed torch-1.4.0 torchvision-0.5.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"57Y7UvGDZc-q","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import io\n","import os\n","\n","from tqdm import tqdm\n","\n","import fastai\n","from fastai import *\n","from fastai.text import * \n","from functools import partial\n","from fastai.vision import *\n","from fastai.metrics import error_rate\n","\n","import h5py\n","import numpy as np\n","import pandas as pd\n","import cv2\n","from tqdm import tqdm\n","from fastai.callbacks import EarlyStoppingCallback, SaveModelCallback\n","from fastai.metrics import error_rate\n","\n","# Google Drive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth, drive\n","from oauth2client.client import GoogleCredentials\n","from google.colab import drive"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8f_eNXQgZf6S","colab_type":"text"},"source":["Google Drive"]},{"cell_type":"code","metadata":{"id":"5U4qYrxteh7r","colab_type":"code","outputId":"ae5e75eb-64e6-4a9a-b409-406cb4233e91","executionInfo":{"status":"ok","timestamp":1592158122222,"user_tz":-120,"elapsed":187914,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":128}},"source":["# auth.authenticate_user()\n","# gauth = GoogleAuth()\n","# gauth.credentials = GoogleCredentials.get_application_default()\n","# GoogleDrive(gauth)\n","drive.mount(\"/content/drive\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qJRSsk-iZmcF","colab_type":"text"},"source":["General parameters and settings"]},{"cell_type":"code","metadata":{"id":"G3JEBf1fZn9R","colab_type":"code","colab":{}},"source":["input_models_folder = \"/content/drive/My Drive/document-classification/models/final-models/\"\n","output_models_folder = \"/content/drive/My Drive/document-classification/models/output-late-fusion\"\n","dataset_path = \"/content/drive/My Drive/document-classification/datasets/rvl-cdip/mini-dataset-1488-288-192\"\n","\n","path_train_ocr = os.path.join(dataset_path, 'train_extracted.csv')\n","path_test_ocr = os.path.join(dataset_path, 'test_extracted.csv')\n","path_valid_ocr = os.path.join(dataset_path, 'valid_extracted.csv')\n","\n","# Shape of the images in input to the CNN\n","cnn_image_shape = (224, 224)\n","# Number of images classes\n","n_classes = 16\n","# Batch size to be used in training\n","batch_size = 32"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5Rc3YUhvaOr1","colab_type":"text"},"source":["# Input Models"]},{"cell_type":"markdown","metadata":{"id":"BDTHjQ6Sh0E3","colab_type":"text"},"source":["Load the VGG model (image classification) and the LSTM based model (text classification) trained in the previous notebooks."]},{"cell_type":"markdown","metadata":{"id":"hoEMGzlfaui0","colab_type":"text"},"source":["## VGG Model"]},{"cell_type":"markdown","metadata":{"id":"VARXe8_0bJGj","colab_type":"text"},"source":["### Data"]},{"cell_type":"code","metadata":{"id":"p-fxMdzpDdgF","colab_type":"code","outputId":"25d705ca-bae9-4a6f-bb63-06d8abca52d1","executionInfo":{"status":"ok","timestamp":1592158231440,"user_tz":-120,"elapsed":109169,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":235}},"source":["df_train = pd.read_csv(os.path.join(dataset_path, \"train-labels.csv\"), names=[\"image\", \"label\"])\n","df_valid = pd.read_csv(os.path.join(dataset_path, \"valid-labels.csv\"), names=[\"image\", \"label\"])\n","df_train[\"is_valid\"] = False\n","df_valid[\"is_valid\"] = True\n","df_joined = pd.concat([df_train, df_valid], ignore_index=True)\n","print(df_joined.head())\n","print(df_joined.tail())\n","\n","data_vgg = (ImageList.from_df(df_joined, dataset_path, cols=\"image\")#, folder=mini_dataset_path)\n","        .split_from_df()\n","        .label_from_df()\n","        .transform(size=cnn_image_shape, resize_method=ResizeMethod.SQUISH)\n","        .databunch(bs=batch_size)\n","        .normalize())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["                                 image  label  is_valid\n","0  train/0/0/0/0/94002065_94002066.tif     10     False\n","1         train/0/0/0/1/2074950097.tif     10     False\n","2      train/0/0/0/2/50284095-4103.tif      6     False\n","3           train/0/0/0/3/04003306.tif     10     False\n","4         train/0/0/0/4/2024967978.tif     11     False\n","                                        image  label  is_valid\n","1771             valid/0/2/8/3/0060077830.tif      7      True\n","1772             valid/0/2/8/4/2045723775.tif     15      True\n","1773  valid/0/2/8/5/2062426213_2062426237.tif     12      True\n","1774      valid/0/2/8/6/01747683_01747694.tif     13      True\n","1775               valid/0/2/8/7/10395005.tif      8      True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KVjv7tE5bK28","colab_type":"text"},"source":["### Model"]},{"cell_type":"code","metadata":{"id":"Y3pUjgmoduN1","colab_type":"code","outputId":"e62e2b47-08ef-402b-9fb3-fa8e40d59b3e","executionInfo":{"status":"ok","timestamp":1592158240825,"user_tz":-120,"elapsed":112621,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["94ad0b3df5b94ac8942ff01e66d14656","e0059157caa34bc297b12f63ed176ad4","31a6bcd5b0df4f71bb385425c1b97113","459ca4daef7b45cd965a9c4633ff2ba7","d85f0429c11748c29a5ae7840739e61f","87b53844ac4a47ad9fc9e3714bf08867","4f9cdac5ed0d406684d6d8c3bf072c08","cd718187a633412f9ca606a2bd1c5d74"]}},"source":["learn_vgg = cnn_learner(data_vgg, models.vgg16_bn, metrics=accuracy,\n","                    model_dir=input_models_folder)\n","learn_vgg.load(\"image-class_1488-288-192_valid-acc-67.36\");\n","learn_vgg.model"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Downloading: \"https://download.pytorch.org/models/vgg16_bn-6c64b313.pth\" to /root/.cache/torch/checkpoints/vgg16_bn-6c64b313.pth\n"],"name":"stderr"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"94ad0b3df5b94ac8942ff01e66d14656","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=553507836.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (7): Dropout(p=0.5, inplace=False)\n","    (8): Linear(in_features=512, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"wQ5eTjJwgxnH","colab_type":"text"},"source":["Remove the final layers from the model: ***NOT HERE IN THIS FUSION***"]},{"cell_type":"code","metadata":{"id":"iwO-kpzmeQmd","colab_type":"code","colab":{}},"source":["#learn_vgg.model[-1] = learn_vgg.model[-1][:-3] \n","#learn_vgg.model"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NLjSxjkBa9IF","colab_type":"text"},"source":["## LSTM-based Model (ULMFiT)"]},{"cell_type":"markdown","metadata":{"id":"h7Hj0jKAazs7","colab_type":"text"},"source":["### Data"]},{"cell_type":"code","metadata":{"id":"5XZ0KIAjedn8","colab_type":"code","outputId":"ae370905-607b-48fa-cd1b-8c9569c6338b","executionInfo":{"status":"ok","timestamp":1592158243434,"user_tz":-120,"elapsed":110643,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["df_trn, df_val, df_test = pd.read_csv(path_train_ocr,names=['text','label']), pd.read_csv(path_valid_ocr,names=['text','label']), pd.read_csv(path_test_ocr,names=['text','label'])\n","print(df_trn.shape, df_val.shape, df_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(1488, 2) (288, 2) (192, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_XSuZDp1exH0","colab_type":"code","outputId":"8ebed067-3fcd-48d9-c308-a0d15309a40b","executionInfo":{"status":"ok","timestamp":1592158255301,"user_tz":-120,"elapsed":121457,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":17}},"source":["# Language model data\n","data_lm = TextLMDataBunch.from_df(train_df = df_trn, valid_df = df_val, path = \"\",\n","                                  text_cols=\"text\", label_cols=\"label\")\n","# Classifier model data\n","data_clas = TextClasDataBunch.from_df(path = \"\", train_df = df_trn, valid_df = df_val,\n","                                      text_cols=\"text\", label_cols=\"label\", vocab=data_lm.train_ds.vocab, bs=batch_size)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"38p0TVX0a1tE","colab_type":"text"},"source":["### Model"]},{"cell_type":"code","metadata":{"id":"zQ5Sbfr4e4VU","colab_type":"code","outputId":"0253ba21-d106-4089-ce25-8730f6367e3a","executionInfo":{"status":"ok","timestamp":1592158269322,"user_tz":-120,"elapsed":133450,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":726}},"source":["learn_text = text_classifier_learner(data_clas, arch=AWD_LSTM, drop_mult=0.7,\n","                                     model_dir=input_models_folder)\n","learn_text.load(\"text-class_1488-288-192_valid-acc-59.38\")\n","learn_text.model"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Downloading https://s3.amazonaws.com/fast-ai-modelzoo/wt103-fwd.tgz\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":[""],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["SequentialRNN(\n","  (0): MultiBatchEncoder(\n","    (module): AWD_LSTM(\n","      (encoder): Embedding(15392, 400, padding_idx=1)\n","      (encoder_dp): EmbeddingDropout(\n","        (emb): Embedding(15392, 400, padding_idx=1)\n","      )\n","      (rnns): ModuleList(\n","        (0): WeightDropout(\n","          (module): LSTM(400, 1152, batch_first=True)\n","        )\n","        (1): WeightDropout(\n","          (module): LSTM(1152, 1152, batch_first=True)\n","        )\n","        (2): WeightDropout(\n","          (module): LSTM(1152, 400, batch_first=True)\n","        )\n","      )\n","      (input_dp): RNNDropout()\n","      (hidden_dps): ModuleList(\n","        (0): RNNDropout()\n","        (1): RNNDropout()\n","        (2): RNNDropout()\n","      )\n","    )\n","  )\n","  (1): PoolingLinearClassifier(\n","    (layers): Sequential(\n","      (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): Dropout(p=0.27999999999999997, inplace=False)\n","      (2): Linear(in_features=1200, out_features=50, bias=True)\n","      (3): ReLU(inplace=True)\n","      (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): Dropout(p=0.1, inplace=False)\n","      (6): Linear(in_features=50, out_features=16, bias=True)\n","    )\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"BpjHs2xFhBMA","colab_type":"text"},"source":["***NOT HERE IN THIS FUSION***\n","Remove the final layers from the model (according to https://gist.github.com/joshfp/b62b76eae95e6863cb511997b5a63118)"]},{"cell_type":"code","metadata":{"id":"f_ddKCxZfNzF","colab_type":"code","colab":{}},"source":["#learn_text.model[-1].layers = learn_text.model[-1].layers[:-3] \n","#learn_text.model"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OAYEuveEfclc","colab_type":"text"},"source":["# Concatenated Model"]},{"cell_type":"markdown","metadata":{"id":"q5hfaaxvidMI","colab_type":"text"},"source":["Combine the two previous models into a new one. Doing this, the new model will classify using both visual and textual features."]},{"cell_type":"markdown","metadata":{"id":"aH7fKnHSnLiR","colab_type":"text"},"source":["## Data"]},{"cell_type":"markdown","metadata":{"id":"sBoo3jY5blEO","colab_type":"text"},"source":["Define a custom PyTorch Dataset to concat the two datasets (images and text).\n","\n","When an element of the Dataset is requested (\\_\\_getitem\\__ method) resize the corresponding image to the target size before returning it along with the text and the label.\n","\n","N.B.: passing an ImageList could not be memory efficient (check how fastai manage the images in ImageList). Consider passing a list of paths and loading the image in \\_\\_getItem\\_\\_"]},{"cell_type":"code","metadata":{"id":"dTtMBAWXff4k","colab_type":"code","colab":{}},"source":["# Per accedere ad alcune funzionalità di fastai è necessario definire cose aggiuntive\n","# nel Dataset\n","class ConcatDataset(Dataset):\n","    def __init__(self, x_images: ImageList, x_texts: TextList, y): \n","        self.x_images = x_images\n","        self.x_texts = x_texts\n","        self.y = y\n","\n","    def __len__(self):\n","        return len(self.y)\n","    \n","    def __getitem__(self, i):\n","        return (self.x_images[i].apply_tfms([], size=cnn_image_shape, resize_method=ResizeMethod.SQUISH),\n","                                      self.x_texts[i]), self.y[i]\n","\n","train_ds = ConcatDataset(data_vgg.train_ds.x, data_clas.train_ds.x, data_vgg.train_ds.y)\n","valid_ds = ConcatDataset(data_vgg.valid_ds.x, data_clas.valid_ds.x, data_vgg.valid_ds.y)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AqZH5ERoe1XH","colab_type":"text"},"source":["Define a collate function to pass to the DataBunch. This function will replace the one used by the Dataloader and describe how to collate the samples taken for a batch from the ConcatDataset."]},{"cell_type":"code","metadata":{"id":"xLv_ovjGfKhm","colab_type":"code","colab":{}},"source":["def my_collate(batch):\n","    x,y = list(zip(*batch))\n","    x1,x2 = list(zip(*x))\n","    x1 = to_data(x1)\n","    x1 = torch.stack(x1)\n","    x2, y = pad_collate(list(zip(x2, y)), pad_idx=1, pad_first=True)\n","    \n","    return (x1, x2), y"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oDXAXxZxfgc6","colab_type":"text"},"source":["The following two cells were used in the example taken from https://gist.github.com/joshfp/b62b76eae95e6863cb511997b5a63118.\n","\n","The Sampler would allow to random sort data, but their behaviour is not clear to us.\n","We found simpler letting the DataBunch automatic creating the DataLoaders."]},{"cell_type":"markdown","metadata":{"id":"Y5soXFj4gkCY","colab_type":"text"},"source":["Create the DataBunch from the custom datasets and the collate function."]},{"cell_type":"code","metadata":{"id":"6cVrPn38gsxX","colab_type":"code","colab":{}},"source":["data = DataBunch.create(train_ds, valid_ds, collate_fn=my_collate, path=dataset_path, bs=batch_size)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0bCaaM7I1oFm","colab_type":"code","colab":{}},"source":["data.one_batch()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"og60OiHIpPky","colab_type":"text"},"source":["## Model"]},{"cell_type":"markdown","metadata":{"id":"SuL4I1p-l1y7","colab_type":"text"},"source":["Define the new model taking the other two and adding linear layers at the end.\n","\n","The size of the input to the first linear layer must agree with the output of the other two models.\n","\n","We add two blocks of batch normalization + dropout + linear layers.\n","\n","Dropout probability suggested values are 0.25 for the dropout between the input layer and the linear layer before softmax, and 0.5 for the dropout before softmax layer. In this case, the input size to the first linear layer is only 32 (16 probabilities from the text classifier + 16 probabilities from the image classifier) so set dropout probability to 0."]},{"cell_type":"code","metadata":{"id":"VD76UX5UpaEj","colab_type":"code","outputId":"a10fad01-4a8d-4041-c23c-0727b9506262","executionInfo":{"status":"ok","timestamp":1592158308740,"user_tz":-120,"elapsed":162190,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.summary()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential\n","======================================================================\n","Layer (type)         Output Shape         Param #    Trainable \n","======================================================================\n","Conv2d               [64, 224, 224]       1,792      False     \n","______________________________________________________________________\n","BatchNorm2d          [64, 224, 224]       128        True      \n","______________________________________________________________________\n","ReLU                 [64, 224, 224]       0          False     \n","______________________________________________________________________\n","Conv2d               [64, 224, 224]       36,928     False     \n","______________________________________________________________________\n","BatchNorm2d          [64, 224, 224]       128        True      \n","______________________________________________________________________\n","ReLU                 [64, 224, 224]       0          False     \n","______________________________________________________________________\n","MaxPool2d            [64, 112, 112]       0          False     \n","______________________________________________________________________\n","Conv2d               [128, 112, 112]      73,856     False     \n","______________________________________________________________________\n","BatchNorm2d          [128, 112, 112]      256        True      \n","______________________________________________________________________\n","ReLU                 [128, 112, 112]      0          False     \n","______________________________________________________________________\n","Conv2d               [128, 112, 112]      147,584    False     \n","______________________________________________________________________\n","BatchNorm2d          [128, 112, 112]      256        True      \n","______________________________________________________________________\n","ReLU                 [128, 112, 112]      0          False     \n","______________________________________________________________________\n","MaxPool2d            [128, 56, 56]        0          False     \n","______________________________________________________________________\n","Conv2d               [256, 56, 56]        295,168    False     \n","______________________________________________________________________\n","BatchNorm2d          [256, 56, 56]        512        True      \n","______________________________________________________________________\n","ReLU                 [256, 56, 56]        0          False     \n","______________________________________________________________________\n","Conv2d               [256, 56, 56]        590,080    False     \n","______________________________________________________________________\n","BatchNorm2d          [256, 56, 56]        512        True      \n","______________________________________________________________________\n","ReLU                 [256, 56, 56]        0          False     \n","______________________________________________________________________\n","Conv2d               [256, 56, 56]        590,080    False     \n","______________________________________________________________________\n","BatchNorm2d          [256, 56, 56]        512        True      \n","______________________________________________________________________\n","ReLU                 [256, 56, 56]        0          False     \n","______________________________________________________________________\n","MaxPool2d            [256, 28, 28]        0          False     \n","______________________________________________________________________\n","Conv2d               [512, 28, 28]        1,180,160  False     \n","______________________________________________________________________\n","BatchNorm2d          [512, 28, 28]        1,024      True      \n","______________________________________________________________________\n","ReLU                 [512, 28, 28]        0          False     \n","______________________________________________________________________\n","Conv2d               [512, 28, 28]        2,359,808  False     \n","______________________________________________________________________\n","BatchNorm2d          [512, 28, 28]        1,024      True      \n","______________________________________________________________________\n","ReLU                 [512, 28, 28]        0          False     \n","______________________________________________________________________\n","Conv2d               [512, 28, 28]        2,359,808  False     \n","______________________________________________________________________\n","BatchNorm2d          [512, 28, 28]        1,024      True      \n","______________________________________________________________________\n","ReLU                 [512, 28, 28]        0          False     \n","______________________________________________________________________\n","MaxPool2d            [512, 14, 14]        0          False     \n","______________________________________________________________________\n","Conv2d               [512, 14, 14]        2,359,808  False     \n","______________________________________________________________________\n","BatchNorm2d          [512, 14, 14]        1,024      True      \n","______________________________________________________________________\n","ReLU                 [512, 14, 14]        0          False     \n","______________________________________________________________________\n","Conv2d               [512, 14, 14]        2,359,808  False     \n","______________________________________________________________________\n","BatchNorm2d          [512, 14, 14]        1,024      True      \n","______________________________________________________________________\n","ReLU                 [512, 14, 14]        0          False     \n","______________________________________________________________________\n","Conv2d               [512, 14, 14]        2,359,808  False     \n","______________________________________________________________________\n","BatchNorm2d          [512, 14, 14]        1,024      True      \n","______________________________________________________________________\n","ReLU                 [512, 14, 14]        0          False     \n","______________________________________________________________________\n","MaxPool2d            [512, 7, 7]          0          False     \n","______________________________________________________________________\n","AdaptiveAvgPool2d    [512, 7, 7]          0          False     \n","______________________________________________________________________\n","AdaptiveAvgPool2d    [512, 1, 1]          0          False     \n","______________________________________________________________________\n","AdaptiveMaxPool2d    [512, 1, 1]          0          False     \n","______________________________________________________________________\n","Flatten              [1024]               0          False     \n","______________________________________________________________________\n","BatchNorm1d          [1024]               2,048      True      \n","______________________________________________________________________\n","Dropout              [1024]               0          False     \n","______________________________________________________________________\n","Linear               [512]                524,800    True      \n","______________________________________________________________________\n","ReLU                 [512]                0          False     \n","______________________________________________________________________\n","BatchNorm1d          [512]                1,024      True      \n","______________________________________________________________________\n","Dropout              [512]                0          False     \n","______________________________________________________________________\n","Linear               [16]                 8,208      True      \n","______________________________________________________________________\n","\n","Total params: 15,259,216\n","Total trainable params: 544,528\n","Total non-trainable params: 14,714,688\n","Optimized with 'torch.optim.adam.Adam', betas=(0.9, 0.99)\n","Using true weight decay as discussed in https://www.fast.ai/2018/07/02/adam-weight-decay/ \n","Loss function : FlattenedLoss\n","======================================================================\n","Callbacks functions applied "]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"BU8qHKqZpUN9","colab_type":"code","colab":{}},"source":["class ConcatModel(nn.Module):\n","    def __init__(self, mod_cnn, mod_nlp, input_dim, output_dim): \n","        super().__init__()\n","        self.mod_cnn = mod_cnn\n","        self.mod_nlp = mod_nlp\n","        \n","        # Final custom part\n","        n_neurons = 256\n","        last_layers = []\n","        last_layers += bn_drop_lin(input_dim, n_neurons, p=0, actn=nn.ReLU(inplace=True))\n","        last_layers += bn_drop_lin(n_neurons, output_dim, p=0.5)\n","        # lst_layers = []\n","        # activs = [nn.ReLU(inplace=True),] * (len(layers)-2) + [None]\n","        # for n_in,n_out,p,actn in zip(layers[:-1], layers[1:], drops, activs):\n","        #     lst_layers += bn_drop_lin(n_in, n_out, p=p, actn=actn)\n","        self.layers = nn.Sequential(*last_layers)\n","\n","    def forward(self, x_cnn, x_nlp):\n","        x_cnn = self.mod_cnn(x_cnn)\n","        # perchè [0]? Rimuovere? -> Forse perche il cat si aspetta la stessa \n","        # dimensione dei tensori lungo la dim=0 e x_nlp diventa multidim?\n","        x_nlp = self.mod_nlp(x_nlp)[0]\n","        x = torch.cat([x_cnn, x_nlp], dim=1)\n","        return self.layers(x)    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R4vp27FipbbE","colab_type":"code","outputId":"4a3da410-16e5-42cd-ae32-81df3922baa8","executionInfo":{"status":"ok","timestamp":1592158308744,"user_tz":-120,"elapsed":155872,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["input_dim = 32\n","output_dim = 16\n","model = ConcatModel(learn_vgg.model, learn_text.model, input_dim, output_dim)\n","model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ConcatModel(\n","  (mod_cnn): Sequential(\n","    (0): Sequential(\n","      (0): Sequential(\n","        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (2): ReLU(inplace=True)\n","        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (5): ReLU(inplace=True)\n","        (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (9): ReLU(inplace=True)\n","        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (12): ReLU(inplace=True)\n","        (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (16): ReLU(inplace=True)\n","        (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (19): ReLU(inplace=True)\n","        (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (22): ReLU(inplace=True)\n","        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (26): ReLU(inplace=True)\n","        (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (29): ReLU(inplace=True)\n","        (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (32): ReLU(inplace=True)\n","        (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","        (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (36): ReLU(inplace=True)\n","        (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (39): ReLU(inplace=True)\n","        (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (42): ReLU(inplace=True)\n","        (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      )\n","      (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","    )\n","    (1): Sequential(\n","      (0): AdaptiveConcatPool2d(\n","        (ap): AdaptiveAvgPool2d(output_size=1)\n","        (mp): AdaptiveMaxPool2d(output_size=1)\n","      )\n","      (1): Flatten()\n","      (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (3): Dropout(p=0.25, inplace=False)\n","      (4): Linear(in_features=1024, out_features=512, bias=True)\n","      (5): ReLU(inplace=True)\n","      (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): Dropout(p=0.5, inplace=False)\n","      (8): Linear(in_features=512, out_features=16, bias=True)\n","    )\n","  )\n","  (mod_nlp): SequentialRNN(\n","    (0): MultiBatchEncoder(\n","      (module): AWD_LSTM(\n","        (encoder): Embedding(15392, 400, padding_idx=1)\n","        (encoder_dp): EmbeddingDropout(\n","          (emb): Embedding(15392, 400, padding_idx=1)\n","        )\n","        (rnns): ModuleList(\n","          (0): WeightDropout(\n","            (module): LSTM(400, 1152, batch_first=True)\n","          )\n","          (1): WeightDropout(\n","            (module): LSTM(1152, 1152, batch_first=True)\n","          )\n","          (2): WeightDropout(\n","            (module): LSTM(1152, 400, batch_first=True)\n","          )\n","        )\n","        (input_dp): RNNDropout()\n","        (hidden_dps): ModuleList(\n","          (0): RNNDropout()\n","          (1): RNNDropout()\n","          (2): RNNDropout()\n","        )\n","      )\n","    )\n","    (1): PoolingLinearClassifier(\n","      (layers): Sequential(\n","        (0): BatchNorm1d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (1): Dropout(p=0.27999999999999997, inplace=False)\n","        (2): Linear(in_features=1200, out_features=50, bias=True)\n","        (3): ReLU(inplace=True)\n","        (4): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (5): Dropout(p=0.1, inplace=False)\n","        (6): Linear(in_features=50, out_features=16, bias=True)\n","      )\n","    )\n","  )\n","  (layers): Sequential(\n","    (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (1): Linear(in_features=32, out_features=256, bias=True)\n","    (2): ReLU(inplace=True)\n","    (3): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (4): Dropout(p=0.5, inplace=False)\n","    (5): Linear(in_features=256, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"ofNKNyU6qLm5","colab_type":"text"},"source":["## Learner"]},{"cell_type":"code","metadata":{"id":"EsO0RZXRnjOq","colab_type":"code","outputId":"0530cf68-e27b-44d1-8f20-f94d0a60a9c4","executionInfo":{"status":"ok","timestamp":1592158308745,"user_tz":-120,"elapsed":149672,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["print(len(learn_text.layer_groups))\n","print(len(learn_vgg.layer_groups))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["5\n","3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VailNOCcZseh","colab_type":"code","outputId":"4c3b3514-0b32-4f3d-9592-941569c61959","executionInfo":{"status":"ok","timestamp":1592158308746,"user_tz":-120,"elapsed":148756,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.model"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sequential(\n","  (0): Sequential(\n","    (0): Sequential(\n","      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU(inplace=True)\n","      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (5): ReLU(inplace=True)\n","      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (9): ReLU(inplace=True)\n","      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (12): ReLU(inplace=True)\n","      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (16): ReLU(inplace=True)\n","      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (19): ReLU(inplace=True)\n","      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (22): ReLU(inplace=True)\n","      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (26): ReLU(inplace=True)\n","      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (29): ReLU(inplace=True)\n","      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (32): ReLU(inplace=True)\n","      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (36): ReLU(inplace=True)\n","      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (39): ReLU(inplace=True)\n","      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (42): ReLU(inplace=True)\n","      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    )\n","    (1): AdaptiveAvgPool2d(output_size=(7, 7))\n","  )\n","  (1): Sequential(\n","    (0): AdaptiveConcatPool2d(\n","      (ap): AdaptiveAvgPool2d(output_size=1)\n","      (mp): AdaptiveMaxPool2d(output_size=1)\n","    )\n","    (1): Flatten()\n","    (2): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (3): Dropout(p=0.25, inplace=False)\n","    (4): Linear(in_features=1024, out_features=512, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (7): Dropout(p=0.5, inplace=False)\n","    (8): Linear(in_features=512, out_features=16, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"KHq3iYh0ZPq4","colab_type":"code","outputId":"1e4a157d-28b1-4613-a1e7-aa637d57bda4","executionInfo":{"status":"ok","timestamp":1592158308747,"user_tz":-120,"elapsed":146163,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["learn_vgg.layer_groups"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Sequential(\n","   (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (2): ReLU(inplace=True)\n","   (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (5): ReLU(inplace=True)\n","   (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (9): ReLU(inplace=True)\n","   (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (12): ReLU(inplace=True)\n","   (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (16): ReLU(inplace=True)\n","   (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (19): ReLU(inplace=True)\n","   (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n"," ), Sequential(\n","   (0): ReLU(inplace=True)\n","   (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (4): ReLU(inplace=True)\n","   (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (7): ReLU(inplace=True)\n","   (8): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (10): ReLU(inplace=True)\n","   (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (12): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (13): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (14): ReLU(inplace=True)\n","   (15): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (17): ReLU(inplace=True)\n","   (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","   (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (20): ReLU(inplace=True)\n","   (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","   (22): AdaptiveAvgPool2d(output_size=(7, 7))\n"," ), Sequential(\n","   (0): AdaptiveAvgPool2d(output_size=1)\n","   (1): AdaptiveMaxPool2d(output_size=1)\n","   (2): Flatten()\n","   (3): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (4): Dropout(p=0.25, inplace=False)\n","   (5): Linear(in_features=1024, out_features=512, bias=True)\n","   (6): ReLU(inplace=True)\n","   (7): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","   (8): Dropout(p=0.5, inplace=False)\n","   (9): Linear(in_features=512, out_features=16, bias=True)\n"," )]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"Ld4gb5R5c6bT","colab_type":"text"},"source":["Define layer groups for the new model. Reuse the two other models layer groups and add a group with the new final layers.\n","\n","N.B. Separate the CNN linear layers from the last convolutional section into a new group (Do it in the notebook 2)"]},{"cell_type":"code","metadata":{"id":"OhHhmmX9qRWl","colab_type":"code","colab":{}},"source":["loss_func = nn.CrossEntropyLoss()\n","# Serve per il discriminative layer training -> serve per dare learning rates diversi\n","# ad ogni gruppo\n","# Approfondire quali layer appartengono ai gruppi\n","layer_groups = [nn.Sequential(*flatten_model(learn_text.layer_groups[0])),\n","                nn.Sequential(*flatten_model(learn_text.layer_groups[1])),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[2]) + \n","                                flatten_model(learn_vgg.layer_groups[0]))),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[3]) + \n","                                flatten_model(learn_vgg.layer_groups[1]))),\n","                nn.Sequential(*(flatten_model(learn_text.layer_groups[4]) + \n","                                flatten_model(learn_vgg.layer_groups[2]))),\n","                nn.Sequential(*flatten_model(model.layers))]\n","\n","learn = Learner(data, model, loss_func=loss_func, metrics=accuracy, layer_groups=layer_groups,\n","                path=output_models_folder)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tizW_P_AqQc9","colab_type":"text"},"source":["# Training"]},{"cell_type":"code","metadata":{"id":"vViMd6Q5o8Ir","colab_type":"code","colab":{}},"source":["# Congela tutti i gruppi di layer in layer_groups tranne nell'ultimo (i fully connected)\n","learn.freeze()\n","# learn.summary() -> non funziona per via del custom dataset"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XG5YUZUKnh4y","colab_type":"text"},"source":["Find the best learning rate studying its trend (Experimental).\n","\n","This function has been taken from this post: https://forums.fast.ai/t/automated-learning-rate-suggester/44199"]},{"cell_type":"code","metadata":{"id":"2SF2uu12nv2K","colab_type":"code","outputId":"86d8aaf5-e982-4bfc-95ab-93c20bb6f290","executionInfo":{"status":"ok","timestamp":1592120374849,"user_tz":-120,"elapsed":312312,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":688}},"source":["def find_appropriate_lr(model:Learner, lr_diff:int = 15, loss_threshold:float = .05, adjust_value:float = 1, plot:bool = False) -> float:\n","    #Run the Learning Rate Finder\n","    model.lr_find()\n","    \n","    #Get loss values and their corresponding gradients, and get lr values\n","    losses = np.array(model.recorder.losses)\n","    assert(lr_diff < len(losses))\n","    loss_grad = np.gradient(losses)\n","    lrs = model.recorder.lrs\n","    \n","    #Search for index in gradients where loss is lowest before the loss spike\n","    #Initialize right and left idx using the lr_diff as a spacing unit\n","    #Set the local min lr as -1 to signify if threshold is too low\n","    r_idx = -1\n","    l_idx = r_idx - lr_diff\n","    while (l_idx >= -len(losses)) and (abs(loss_grad[r_idx] - loss_grad[l_idx]) > loss_threshold):\n","        local_min_lr = lrs[l_idx]\n","        r_idx -= 1\n","        l_idx -= 1\n","\n","    lr_to_use = local_min_lr * adjust_value\n","    \n","    if plot:\n","        # plots the gradients of the losses in respect to the learning rate change\n","        plt.plot(loss_grad)\n","        plt.plot(len(losses)+l_idx, loss_grad[l_idx],markersize=10,marker='o',color='red')\n","        plt.ylabel(\"Loss\")\n","        plt.xlabel(\"Index of LRs\")\n","        plt.show()\n","\n","        plt.plot(np.log10(lrs), losses)\n","        plt.ylabel(\"Loss\")\n","        plt.xlabel(\"Log 10 Transform of Learning Rate\")\n","        loss_coord = np.interp(np.log10(lr_to_use), np.log10(lrs), losses)\n","        plt.plot(np.log10(lr_to_use), loss_coord, markersize=10,marker='o',color='red')\n","        plt.show()\n","        \n","    return lr_to_use\n","\n","learning_rate = find_appropriate_lr(learn, plot=True)\n","print(f\"Learning rate: {learning_rate}\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='1' class='' max='3' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      33.33% [1/3 03:59<07:59]\n","    </div>\n","    \n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>2.984515</td>\n","      <td>#na#</td>\n","      <td>03:59</td>\n","    </tr>\n","  </tbody>\n","</table><p>\n","\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n","                background: #F44336;\n","            }\n","        </style>\n","      <progress value='43' class='' max='46' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      93.48% [43/46 01:08<00:04 6.4235]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["Learning rate: 0.004365158322401656\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3f6yZ7PeGxxl","colab_type":"text"},"source":["Train the network."]},{"cell_type":"code","metadata":{"id":"421dYBJsHIMz","colab_type":"code","outputId":"1853ce9b-b33d-4c2b-f809-49bd7616d991","executionInfo":{"status":"ok","timestamp":1592127395736,"user_tz":-120,"elapsed":5406973,"user":{"displayName":"IACOPO ERPICHINI","photoUrl":"","userId":"15535855654116468778"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["save_model = SaveModelCallback(learn, every=\"improvement\", monitor=\"accuracy\",\n","                               mode=\"max\", name=\"best-late-fusion\")\n","learn.fit_one_cycle(80, max_lr=learning_rate, callbacks=[save_model])\n","print(\"Training completed\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>epoch</th>\n","      <th>train_loss</th>\n","      <th>valid_loss</th>\n","      <th>accuracy</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>0</td>\n","      <td>2.562870</td>\n","      <td>2.268186</td>\n","      <td>0.368056</td>\n","      <td>02:23</td>\n","    </tr>\n","    <tr>\n","      <td>1</td>\n","      <td>2.041801</td>\n","      <td>1.710591</td>\n","      <td>0.618056</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>1.504132</td>\n","      <td>1.334311</td>\n","      <td>0.670139</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>1.071713</td>\n","      <td>1.125241</td>\n","      <td>0.715278</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.749341</td>\n","      <td>1.016885</td>\n","      <td>0.711806</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.550182</td>\n","      <td>0.968455</td>\n","      <td>0.722222</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.405874</td>\n","      <td>0.976125</td>\n","      <td>0.715278</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.304332</td>\n","      <td>0.979401</td>\n","      <td>0.732639</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.239205</td>\n","      <td>1.001340</td>\n","      <td>0.718750</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.202554</td>\n","      <td>1.079045</td>\n","      <td>0.711806</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.186607</td>\n","      <td>1.097999</td>\n","      <td>0.732639</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.165217</td>\n","      <td>1.098294</td>\n","      <td>0.722222</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.171408</td>\n","      <td>1.238211</td>\n","      <td>0.722222</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.165493</td>\n","      <td>1.351731</td>\n","      <td>0.690972</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.185946</td>\n","      <td>1.352672</td>\n","      <td>0.708333</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.188680</td>\n","      <td>1.410130</td>\n","      <td>0.715278</td>\n","      <td>01:24</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.192978</td>\n","      <td>1.305492</td>\n","      <td>0.670139</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.217511</td>\n","      <td>1.392905</td>\n","      <td>0.694444</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.214599</td>\n","      <td>1.512945</td>\n","      <td>0.694444</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.229288</td>\n","      <td>1.487781</td>\n","      <td>0.694444</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.264129</td>\n","      <td>1.577127</td>\n","      <td>0.711806</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>21</td>\n","      <td>0.285301</td>\n","      <td>1.656583</td>\n","      <td>0.684028</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>22</td>\n","      <td>0.289860</td>\n","      <td>1.543073</td>\n","      <td>0.701389</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>23</td>\n","      <td>0.292056</td>\n","      <td>1.659883</td>\n","      <td>0.677083</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>24</td>\n","      <td>0.290861</td>\n","      <td>1.415698</td>\n","      <td>0.718750</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>25</td>\n","      <td>0.308150</td>\n","      <td>1.539612</td>\n","      <td>0.684028</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>26</td>\n","      <td>0.295950</td>\n","      <td>1.496045</td>\n","      <td>0.715278</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>27</td>\n","      <td>0.311082</td>\n","      <td>1.584713</td>\n","      <td>0.701389</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>28</td>\n","      <td>0.271255</td>\n","      <td>1.709373</td>\n","      <td>0.656250</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>29</td>\n","      <td>0.294887</td>\n","      <td>1.624480</td>\n","      <td>0.690972</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>30</td>\n","      <td>0.270135</td>\n","      <td>1.585338</td>\n","      <td>0.684028</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>31</td>\n","      <td>0.303125</td>\n","      <td>1.610853</td>\n","      <td>0.677083</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>32</td>\n","      <td>0.323611</td>\n","      <td>1.387890</td>\n","      <td>0.722222</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>33</td>\n","      <td>0.303668</td>\n","      <td>1.480481</td>\n","      <td>0.729167</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>34</td>\n","      <td>0.259011</td>\n","      <td>1.547293</td>\n","      <td>0.701389</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>35</td>\n","      <td>0.252786</td>\n","      <td>1.499056</td>\n","      <td>0.725694</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>36</td>\n","      <td>0.249858</td>\n","      <td>1.464229</td>\n","      <td>0.722222</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>37</td>\n","      <td>0.272512</td>\n","      <td>1.583919</td>\n","      <td>0.680556</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>38</td>\n","      <td>0.260785</td>\n","      <td>1.328046</td>\n","      <td>0.743056</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>39</td>\n","      <td>0.232476</td>\n","      <td>1.466082</td>\n","      <td>0.711806</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>40</td>\n","      <td>0.232837</td>\n","      <td>1.413235</td>\n","      <td>0.729167</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>41</td>\n","      <td>0.211371</td>\n","      <td>1.555830</td>\n","      <td>0.697917</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>42</td>\n","      <td>0.224465</td>\n","      <td>1.533228</td>\n","      <td>0.736111</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>43</td>\n","      <td>0.228017</td>\n","      <td>1.484556</td>\n","      <td>0.722222</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>44</td>\n","      <td>0.204462</td>\n","      <td>1.666610</td>\n","      <td>0.697917</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>45</td>\n","      <td>0.200704</td>\n","      <td>1.506540</td>\n","      <td>0.704861</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>46</td>\n","      <td>0.203828</td>\n","      <td>1.597903</td>\n","      <td>0.701389</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>47</td>\n","      <td>0.207503</td>\n","      <td>1.605458</td>\n","      <td>0.697917</td>\n","      <td>01:24</td>\n","    </tr>\n","    <tr>\n","      <td>48</td>\n","      <td>0.203708</td>\n","      <td>1.464317</td>\n","      <td>0.732639</td>\n","      <td>01:24</td>\n","    </tr>\n","    <tr>\n","      <td>49</td>\n","      <td>0.179163</td>\n","      <td>1.601922</td>\n","      <td>0.701389</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>50</td>\n","      <td>0.173239</td>\n","      <td>1.465578</td>\n","      <td>0.708333</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>51</td>\n","      <td>0.184852</td>\n","      <td>1.427202</td>\n","      <td>0.708333</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>52</td>\n","      <td>0.169172</td>\n","      <td>1.481915</td>\n","      <td>0.704861</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>53</td>\n","      <td>0.183357</td>\n","      <td>1.544481</td>\n","      <td>0.715278</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>54</td>\n","      <td>0.185319</td>\n","      <td>1.550339</td>\n","      <td>0.708333</td>\n","      <td>01:24</td>\n","    </tr>\n","    <tr>\n","      <td>55</td>\n","      <td>0.167473</td>\n","      <td>1.514071</td>\n","      <td>0.711806</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>56</td>\n","      <td>0.154672</td>\n","      <td>1.487335</td>\n","      <td>0.715278</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>57</td>\n","      <td>0.140762</td>\n","      <td>1.493149</td>\n","      <td>0.711806</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>58</td>\n","      <td>0.141901</td>\n","      <td>1.458000</td>\n","      <td>0.708333</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>59</td>\n","      <td>0.121269</td>\n","      <td>1.465124</td>\n","      <td>0.704861</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>60</td>\n","      <td>0.105552</td>\n","      <td>1.498801</td>\n","      <td>0.708333</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>61</td>\n","      <td>0.108690</td>\n","      <td>1.507130</td>\n","      <td>0.715278</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>62</td>\n","      <td>0.115085</td>\n","      <td>1.576080</td>\n","      <td>0.701389</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>63</td>\n","      <td>0.138049</td>\n","      <td>1.474285</td>\n","      <td>0.718750</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>64</td>\n","      <td>0.104739</td>\n","      <td>1.532932</td>\n","      <td>0.694444</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>65</td>\n","      <td>0.119962</td>\n","      <td>1.474876</td>\n","      <td>0.718750</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>66</td>\n","      <td>0.110318</td>\n","      <td>1.441162</td>\n","      <td>0.725694</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>67</td>\n","      <td>0.111432</td>\n","      <td>1.405211</td>\n","      <td>0.732639</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>68</td>\n","      <td>0.088230</td>\n","      <td>1.436475</td>\n","      <td>0.725694</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>69</td>\n","      <td>0.082103</td>\n","      <td>1.445056</td>\n","      <td>0.718750</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>70</td>\n","      <td>0.087757</td>\n","      <td>1.503566</td>\n","      <td>0.718750</td>\n","      <td>01:25</td>\n","    </tr>\n","    <tr>\n","      <td>71</td>\n","      <td>0.097327</td>\n","      <td>1.493598</td>\n","      <td>0.708333</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>72</td>\n","      <td>0.097440</td>\n","      <td>1.479770</td>\n","      <td>0.708333</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>73</td>\n","      <td>0.083592</td>\n","      <td>1.503882</td>\n","      <td>0.708333</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>74</td>\n","      <td>0.076437</td>\n","      <td>1.440450</td>\n","      <td>0.718750</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>75</td>\n","      <td>0.078687</td>\n","      <td>1.466238</td>\n","      <td>0.715278</td>\n","      <td>01:28</td>\n","    </tr>\n","    <tr>\n","      <td>76</td>\n","      <td>0.068288</td>\n","      <td>1.428030</td>\n","      <td>0.722222</td>\n","      <td>01:27</td>\n","    </tr>\n","    <tr>\n","      <td>77</td>\n","      <td>0.078191</td>\n","      <td>1.480793</td>\n","      <td>0.718750</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>78</td>\n","      <td>0.080361</td>\n","      <td>1.462096</td>\n","      <td>0.722222</td>\n","      <td>01:26</td>\n","    </tr>\n","    <tr>\n","      <td>79</td>\n","      <td>0.073007</td>\n","      <td>1.455221</td>\n","      <td>0.715278</td>\n","      <td>01:27</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Better model found at epoch 0 with accuracy value: 0.3680555522441864.\n","Better model found at epoch 1 with accuracy value: 0.6180555820465088.\n","Better model found at epoch 2 with accuracy value: 0.6701388955116272.\n","Better model found at epoch 3 with accuracy value: 0.7152777910232544.\n","Better model found at epoch 5 with accuracy value: 0.7222222089767456.\n","Better model found at epoch 7 with accuracy value: 0.7326388955116272.\n","Better model found at epoch 38 with accuracy value: 0.7430555820465088.\n","Training completed\n"],"name":"stdout"}]}]}